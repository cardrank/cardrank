package cardrank_test

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"

	"github.com/cardrank/cardrank"
)

func ExampleFromRune() {
	c := cardrank.FromRune('üÇ°')
	fmt.Printf("%b\n", c)
	// Output:
	// A‚ô†
}

func ExampleFromString() {
	c := cardrank.FromString("Ah")
	fmt.Printf("%N of %L (%b)\n", c, c, c)
	// Output:
	// Ace of Hearts (A‚ô•)
}

func ExampleMust() {
	v := cardrank.Must("Ah K‚ô† üÉç J‚ô§ 10h")
	fmt.Printf("%b", v)
	// Output:
	// [A‚ô• K‚ô† Q‚ô¶ J‚ô† T‚ô•]
}

func ExampleCard_unmarshal() {
	var v []cardrank.Card
	if err := json.Unmarshal([]byte(`["3s", "4c", "5c", "Ah", "2d"]`), &v); err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", v)
	// Output:
	// [3s 4c 5c Ah 2d]
}

func ExampleDeck_Draw() {
	d := cardrank.NewDeck()
	// note: use a real random source
	r := rand.New(rand.NewSource(52))
	d.Shuffle(r, 1)
	v := d.Draw(7)
	fmt.Printf("%b\n", v)
	// Output:
	// [9‚ô£ 6‚ô• Q‚ô† 3‚ô† J‚ô† 9‚ô• K‚ô£]
}

func ExampleHoldem_Eval() {
	d := cardrank.NewDeck()
	// note: use a real random source
	r := rand.New(rand.NewSource(26076))
	d.Shuffle(r, 1)
	ev := cardrank.Holdem.Eval(d.Draw(2), d.Draw(5))
	fmt.Printf("%b\n", ev)
	fmt.Printf("%S\n", ev)
	// Output:
	// Straight Flush, Five-high, Steel Wheel [5‚ô£ 4‚ô£ 3‚ô£ 2‚ô£ A‚ô£]
	// Straight Flush, Five-high
}

func ExampleSpanish_Eval() {
	d := cardrank.DeckSpanish.New()
	// note: use a real random source
	r := rand.New(rand.NewSource(2231))
	d.Shuffle(r, 1)
	ev := cardrank.Spanish.Eval(d.Draw(2), d.Draw(5))
	fmt.Printf("%b\n", ev)
	// Output:
	// Straight Flush, Jack-high, Bronze Fist [J‚ô¶ T‚ô¶ 9‚ô¶ 8‚ô¶ A‚ô¶]
}

func Example() {
	for i, game := range []struct {
		seed     int64
		players  int
		change   byte
		runs     int
		inactive []int
		names    []string
	}{
		{566, 2, 't', 3, nil, []string{"Alice", "Bob"}},
		{1039, 5, 'f', 2, []int{0, 3, 4}, []string{"Alice", "Bob", "Carl", "Dave", "Elizabeth"}},
		{2087, 6, 't', 2, []int{0, 5}, []string{"Alice", "Bob", "Carl", "Dave", "Elizabeth", "Frank"}},
		{4022, 6, 'p', 2, []int{0, 1, 4}, []string{"Alice", "Bob", "Carl", "Dave", "Elizabeth", "Fenny"}},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		fmt.Printf("------ FusionHiLo %d ------\n", i+1)
		// setup dealer and display
		d := cardrank.FusionHiLo.Dealer(r, 1, game.players)
		// display deck
		deck := d.Deck.All()
		fmt.Println("Deck:")
		for i := 0; i < len(deck); i += 8 {
			n := i + 8
			if n > len(deck) {
				n = len(deck)
			}
			fmt.Printf("  %v\n", deck[i:n])
		}
		last := -1
		for d.Next() {
			i, run := d.Run()
			if last != i {
				fmt.Printf("Run %d:\n", i)
			}
			last = i
			fmt.Printf("  %s\n", d)
			// display pockets
			if d.HasPocket() {
				for i := 0; i < game.players; i++ {
					fmt.Printf("    %d %s: %v\n", i, game.names[i], run.Pockets[i])
				}
			}
			// display discarded cards
			if v := d.Discarded(); len(v) != 0 {
				fmt.Printf("    Discard: %v\n", v)
			}
			// display board
			if d.HasBoard() {
				fmt.Printf("    Board: %v\n", run.Hi)
				if d.Double {
					fmt.Printf("           %v\n", run.Lo)
				}
			}
			// change runs, deactivate positions
			if d.Id() == game.change && i == 0 {
				if success := d.ChangeRuns(game.runs); !success {
					panic("unable to change runs")
				}
				// deactivate
				if success := d.Deactivate(game.inactive...); !success {
					panic("unable to deactivate positions")
				}
			}
		}
		fmt.Println("Showdown:")
		for d.NextResult() {
			n, res := d.Result()
			fmt.Printf("  Run %d:\n", n)
			for i := 0; i < game.players; i++ {
				if d.Active[i] {
					hi := res.Evals[i].Desc(false)
					fmt.Printf("    %d: %v %v %s\n", i, hi.Best, hi.Unused, hi)
					if d.Low || d.Double {
						lo := res.Evals[i].Desc(true)
						fmt.Printf("       %v %v %s\n", lo.Best, lo.Unused, lo)
					}
				} else {
					fmt.Printf("    %d: inactive\n", i)
				}
			}
			hi, lo := res.Win(game.names...)
			fmt.Printf("    Result: %S\n", hi)
			if lo != nil {
				fmt.Printf("            %S\n", lo)
			}
		}
	}
	// Output:
	// ------ FusionHiLo 1 ------
	// Deck:
	//   [4h Qs 5c 4c 5d 8d 8c As]
	//   [Ks 6h 7s 9s 3h Ac Js 9h]
	//   [4s 7d 2h 8s 2s Ad Ts Qh]
	//   [Qc 5h 6s 9d 9c 6c Kd 2d]
	//   [3s Ah Kh 5s Jd Jc 2c Td]
	//   [3c Jh 8h 4d Th 7c 7h 3d]
	//   [6d Tc Kc Qd]
	// Run 0:
	//   p: Pre-Flop (p: 2)
	//     0 Alice: [4h 5c]
	//     1 Bob: [Qs 4c]
	//   f: Flop (p: 1, d: 1, b: 3)
	//     0 Alice: [4h 5c 5d]
	//     1 Bob: [Qs 4c 8d]
	//     Discard: [8c]
	//     Board: [As Ks 6h]
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [4h 5c 5d 7s]
	//     1 Bob: [Qs 4c 8d 9s]
	//     Discard: [8c 3h]
	//     Board: [As Ks 6h Ac]
	//   r: River (d: 1, b: 1)
	//     Discard: [8c 3h Js]
	//     Board: [As Ks 6h Ac 9h]
	// Run 1:
	//   r: River (d: 1, b: 1)
	//     Discard: [4s]
	//     Board: [As Ks 6h Ac 7d]
	// Run 2:
	//   r: River (d: 1, b: 1)
	//     Discard: [2h]
	//     Board: [As Ks 6h Ac 8s]
	// Showdown:
	//   Run 0:
	//     0: [Ac As 5c 5d Ks] [9h 7s 6h 4h] Two Pair, Aces over Fives, kicker King
	//        [] [] None
	//     1: [Ac As 9h 9s Qs] [Ks 8d 6h 4c] Two Pair, Aces over Nines, kicker Queen
	//        [] [] None
	//     Result: Bob scoops with Two Pair, Aces over Nines, kicker Queen
	//   Run 1:
	//     0: [Ac As 7d 7s 5c] [Ks 6h 5d 4h] Two Pair, Aces over Sevens, kicker Five
	//        [7d 6h 5c 4h As] [Ac Ks 7s 5d] Seven, Six, Five, Four, Ace-low
	//     1: [Ac As Ks Qs 9s] [8d 7d 6h 4c] Pair, Aces, kickers King, Queen, Nine
	//        [8d 7d 6h 4c As] [Ac Ks Qs 9s] Eight, Seven, Six, Four, Ace-low
	//     Result: Alice wins with Two Pair, Aces over Sevens, kicker Five
	//             Alice wins with Seven, Six, Five, Four, Ace-low
	//   Run 2:
	//     0: [Ac As 5c 5d Ks] [8s 7s 6h 4h] Two Pair, Aces over Fives, kicker King
	//        [8s 6h 5c 4h As] [Ac Ks 7s 5d] Eight, Six, Five, Four, Ace-low
	//     1: [As Ks Qs 9s 8s] [Ac 8d 6h 4c] Flush, Ace-high, kickers King, Queen, Nine, Eight
	//        [] [] None
	//     Result: Bob wins with Flush, Ace-high, kickers King, Queen, Nine, Eight
	//             Alice wins with Eight, Six, Five, Four, Ace-low
	// ------ FusionHiLo 2 ------
	// Deck:
	//   [2h 5s Ac Ts Kd 5h 6d Th]
	//   [2s 6s 7c 4h 8c 9h Ah 8s]
	//   [Kc 9d 5c 5d As 4d 3h 2c]
	//   [7s 8h 4c 7d 8d Qs 3c 7h]
	//   [Jc Jh 6c 3s Qd 9c 4s 3d]
	//   [Ks Ad Qc Td Tc Qh Js 6h]
	//   [2d 9s Jd Kh]
	// Run 0:
	//   p: Pre-Flop (p: 2)
	//     0 Alice: [2h 5h]
	//     1 Bob: [5s 6d]
	//     2 Carl: [Ac Th]
	//     3 Dave: [Ts 2s]
	//     4 Elizabeth: [Kd 6s]
	//   f: Flop (p: 1, d: 1, b: 3)
	//     0 Alice: [2h 5h 7c]
	//     1 Bob: [5s 6d 4h]
	//     2 Carl: [Ac Th 8c]
	//     3 Dave: [Ts 2s 9h]
	//     4 Elizabeth: [Kd 6s Ah]
	//     Discard: [8s]
	//     Board: [Kc 9d 5c]
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [2h 5h 7c 5d]
	//     1 Bob: [5s 6d 4h As]
	//     2 Carl: [Ac Th 8c 4d]
	//     3 Dave: [Ts 2s 9h 3h]
	//     4 Elizabeth: [Kd 6s Ah 2c]
	//     Discard: [8s 7s]
	//     Board: [Kc 9d 5c 8h]
	//   r: River (d: 1, b: 1)
	//     Discard: [8s 7s 4c]
	//     Board: [Kc 9d 5c 8h 7d]
	// Run 1:
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [2h 5h 7c 8d]
	//     1 Bob: [5s 6d 4h Qs]
	//     2 Carl: [Ac Th 8c 3c]
	//     3 Dave: [Ts 2s 9h 7h]
	//     4 Elizabeth: [Kd 6s Ah Jc]
	//     Discard: [Jh]
	//     Board: [Kc 9d 5c 6c]
	//   r: River (d: 1, b: 1)
	//     Discard: [Jh 3s]
	//     Board: [Kc 9d 5c 6c Qd]
	// Showdown:
	//   Run 0:
	//     0: inactive
	//     1: [9d 8h 7d 6d 5s] [As Kc 5c 4h] Straight, Nine-high
	//        [8h 7d 5c 4h As] [Kc 9d 6d 5s] Eight, Seven, Five, Four, Ace-low
	//     2: [8c 8h Ac Kc 9d] [Th 7d 5c 4d] Pair, Eights, kickers Ace, King, Nine
	//        [8h 7d 5c 4d Ac] [Kc Th 9d 8c] Eight, Seven, Five, Four, Ace-low
	//     3: inactive
	//     4: inactive
	//     Result: Bob wins with Straight, Nine-high
	//             Bob, Carl split with Eight, Seven, Five, Four, Ace-low
	//   Run 1:
	//     0: inactive
	//     1: [Qd Qs 6c 6d Kc] [9d 5c 5s 4h] Two Pair, Queens over Sixes, kicker King
	//        [] [] None
	//     2: [Ac Kc 8c 6c 5c] [Qd Th 9d 3c] Flush, Ace-high, kickers King, Eight, Six, Five
	//        [] [] None
	//     3: inactive
	//     4: inactive
	//     Result: Carl scoops with Flush, Ace-high, kickers King, Eight, Six, Five
	// ------ FusionHiLo 3 ------
	// Deck:
	//   [8h 5d 5c 3h Jc 6h Kd Td]
	//   [6s As 7c 6c 2c Jd 9h 8c]
	//   [7s 5s 8d Tc 3s Kc Qh Qd]
	//   [7d Ks Jh 4s 9s 4h Th Qc]
	//   [Ah 2d Ts 7h 4c Qs Kh 6d]
	//   [9d 2s Js 3d 5h 2h Ac Ad]
	//   [3c 8s 4d 9c]
	// Run 0:
	//   p: Pre-Flop (p: 2)
	//     0 Alice: [8h Kd]
	//     1 Bob: [5d Td]
	//     2 Carl: [5c 6s]
	//     3 Dave: [3h As]
	//     4 Elizabeth: [Jc 7c]
	//     5 Frank: [6h 6c]
	//   f: Flop (p: 1, d: 1, b: 3)
	//     0 Alice: [8h Kd 2c]
	//     1 Bob: [5d Td Jd]
	//     2 Carl: [5c 6s 9h]
	//     3 Dave: [3h As 8c]
	//     4 Elizabeth: [Jc 7c 7s]
	//     5 Frank: [6h 6c 5s]
	//     Discard: [8d]
	//     Board: [Tc 3s Kc]
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [8h Kd 2c Qh]
	//     1 Bob: [5d Td Jd Qd]
	//     2 Carl: [5c 6s 9h 7d]
	//     3 Dave: [3h As 8c Ks]
	//     4 Elizabeth: [Jc 7c 7s Jh]
	//     5 Frank: [6h 6c 5s 4s]
	//     Discard: [8d 9s]
	//     Board: [Tc 3s Kc 4h]
	//   r: River (d: 1, b: 1)
	//     Discard: [8d 9s Th]
	//     Board: [Tc 3s Kc 4h Qc]
	// Run 1:
	//   r: River (d: 1, b: 1)
	//     Discard: [Ah]
	//     Board: [Tc 3s Kc 4h 2d]
	// Showdown:
	//   Run 0:
	//     0: inactive
	//     1: [Qc Qd Tc Td Kc] [Jd 5d 4h 3s] Two Pair, Queens over Tens, kicker King
	//        [] [] None
	//     2: [Kc Qc Tc 9h 7d] [6s 5c 4h 3s] King-high, kickers Queen, Ten, Nine, Seven
	//        [] [] None
	//     3: [Kc Ks 3h 3s Qc] [As Tc 8c 4h] Two Pair, Kings over Threes, kicker Queen
	//        [] [] None
	//     4: [Kc Qc Jc Tc 7c] [Jh 7s 4h 3s] Flush, King-high, kickers Queen, Jack, Ten, Seven
	//        [] [] None
	//     5: inactive
	//     Result: Elizabeth scoops with Flush, King-high, kickers Queen, Jack, Ten, Seven
	//   Run 1:
	//     0: inactive
	//     1: [Tc Td Kc Qd 4h] [Jd 5d 3s 2d] Pair, Tens, kickers King, Queen, Four
	//        [] [] None
	//     2: [6s 5c 4h 3s 2d] [Kc Tc 9h 7d] Straight, Six-high
	//        [6s 5c 4h 3s 2d] [Kc Tc 9h 7d] Six, Five, Four, Three, Two-low
	//     3: [Kc Ks 3h 3s Tc] [As 8c 4h 2d] Two Pair, Kings over Threes, kicker Ten
	//        [8c 4h 3s 2d As] [Kc Ks Tc 3h] Eight, Four, Three, Two, Ace-low
	//     4: [Jc Jh Kc Tc 4h] [7c 7s 3s 2d] Pair, Jacks, kickers King, Ten, Four
	//        [] [] None
	//     5: inactive
	//     Result: Carl wins with Straight, Six-high
	//             Carl wins with Six, Five, Four, Three, Two-low
	// ------ FusionHiLo 4 ------
	// Deck:
	//   [Qc 4h 2c 7c Kc 5c 9d 5h]
	//   [3c Tc 9c Qd As 4s 5d Jc]
	//   [4c Ad 9s 8s Qh 3h Td 7h]
	//   [7s Ks 6d Kd 7d Jh 2d Js]
	//   [4d 6h Th Ah Ac Ts 3d 6c]
	//   [Jd 2s 2h 9h 3s 5s 8d 8c]
	//   [Qs 8h Kh 6s]
	// Run 0:
	//   p: Pre-Flop (p: 2)
	//     0 Alice: [Qc 9d]
	//     1 Bob: [4h 5h]
	//     2 Carl: [2c 3c]
	//     3 Dave: [7c Tc]
	//     4 Elizabeth: [Kc 9c]
	//     5 Fenny: [5c Qd]
	//   f: Flop (p: 1, d: 1, b: 3)
	//     0 Alice: [Qc 9d As]
	//     1 Bob: [4h 5h 4s]
	//     2 Carl: [2c 3c 5d]
	//     3 Dave: [7c Tc Jc]
	//     4 Elizabeth: [Kc 9c 4c]
	//     5 Fenny: [5c Qd Ad]
	//     Discard: [9s]
	//     Board: [8s Qh 3h]
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [Qc 9d As Td]
	//     1 Bob: [4h 5h 4s 7h]
	//     2 Carl: [2c 3c 5d 7s]
	//     3 Dave: [7c Tc Jc Ks]
	//     4 Elizabeth: [Kc 9c 4c 6d]
	//     5 Fenny: [5c Qd Ad Kd]
	//     Discard: [9s 7d]
	//     Board: [8s Qh 3h Jh]
	//   r: River (d: 1, b: 1)
	//     Discard: [9s 7d 2d]
	//     Board: [8s Qh 3h Jh Js]
	// Run 1:
	//   f: Flop (p: 1, d: 1, b: 3)
	//     0 Alice: [Qc 9d 4d]
	//     1 Bob: [4h 5h 6h]
	//     2 Carl: [2c 3c Th]
	//     3 Dave: [7c Tc Ah]
	//     4 Elizabeth: [Kc 9c Ac]
	//     5 Fenny: [5c Qd Ts]
	//     Discard: [3d]
	//     Board: [6c Jd 2s]
	//   t: Turn (p: 1, d: 1, b: 1)
	//     0 Alice: [Qc 9d 4d 2h]
	//     1 Bob: [4h 5h 6h 9h]
	//     2 Carl: [2c 3c Th 3s]
	//     3 Dave: [7c Tc Ah 5s]
	//     4 Elizabeth: [Kc 9c Ac 8d]
	//     5 Fenny: [5c Qd Ts 8c]
	//     Discard: [3d Qs]
	//     Board: [6c Jd 2s 8h]
	//   r: River (d: 1, b: 1)
	//     Discard: [3d Qs Kh]
	//     Board: [6c Jd 2s 8h 6s]
	// Showdown:
	//   Run 0:
	//     0: inactive
	//     1: inactive
	//     2: [Jh Js 3c 3h 7s] [Qh 8s 5d 2c] Two Pair, Jacks over Threes, kicker Seven
	//        [] [] None
	//     3: [Jc Jh Js Ks Qh] [Tc 8s 7c 3h] Three of a Kind, Jacks, kickers King, Queen
	//        [] [] None
	//     4: inactive
	//     5: [Qd Qh Jh Js Ad] [Kd 8s 5c 3h] Two Pair, Queens over Jacks, kicker Ace
	//        [] [] None
	//     Result: Dave scoops with Three of a Kind, Jacks, kickers King, Queen
	//   Run 1:
	//     0: inactive
	//     1: inactive
	//     2: [6c 6s 3c 3s Jd] [Th 8h 2c 2s] Two Pair, Sixes over Threes, kicker Jack
	//        [] [] None
	//     3: [6c 6s Ah Jd Tc] [8h 7c 5s 2s] Pair, Sixes, kickers Ace, Jack, Ten
	//        [8h 6c 5s 2s Ah] [Jd Tc 7c 6s] Eight, Six, Five, Two, Ace-low
	//     4: inactive
	//     5: [8c 8h 6c 6s Qd] [Jd Ts 5c 2s] Two Pair, Eights over Sixes, kicker Queen
	//        [] [] None
	//     Result: Fenny wins with Two Pair, Eights over Sixes, kicker Queen
	//             Dave wins with Eight, Six, Five, Two, Ace-low
}

func ExampleType_holdem() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{3, 2},
		{278062, 2},
		{1928, 6},
		{6151, 6},
		{5680, 6},
		{23965, 2},
		{13959, 2},
		{23366, 6},
		{29555, 3},
		{472600, 3},
		{107, 10},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, board := cardrank.Holdem.Deal(r, 1, game.players)
		evs := cardrank.Holdem.EvalPockets(pockets, board)
		fmt.Printf("------ Holdem %d ------\n", i+1)
		fmt.Printf("Board:    %b\n", board)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Holdem 1 ------
	// Board:    [J‚ô† T‚ô† 2‚ô¶ 2‚ô† Q‚ô•]
	// Player 1: [6‚ô¶ 7‚ô†] Pair, Twos, kickers Queen, Jack, Ten [2‚ô¶ 2‚ô† Q‚ô• J‚ô† T‚ô†] [7‚ô† 6‚ô¶]
	// Player 2: [8‚ô† 4‚ô£] Pair, Twos, kickers Queen, Jack, Ten [2‚ô¶ 2‚ô† Q‚ô• J‚ô† T‚ô†] [8‚ô† 4‚ô£]
	// Result:   Players 1, 2 push with Pair, Twos, kickers Queen, Jack, Ten
	// ------ Holdem 2 ------
	// Board:    [8‚ô† 9‚ô† J‚ô† 9‚ô£ T‚ô†]
	// Player 1: [7‚ô† 6‚ô¶] Straight Flush, Jack-high, Bronze Fist [J‚ô† T‚ô† 9‚ô† 8‚ô† 7‚ô†] [9‚ô£ 6‚ô¶]
	// Player 2: [T‚ô£ Q‚ô†] Straight Flush, Queen-high, Silver Tongue [Q‚ô† J‚ô† T‚ô† 9‚ô† 8‚ô†] [T‚ô£ 9‚ô£]
	// Result:   Player 2 wins with Straight Flush, Queen-high, Silver Tongue
	// ------ Holdem 3 ------
	// Board:    [A‚ô† T‚ô£ K‚ô† J‚ô£ 6‚ô•]
	// Player 1: [T‚ô• 5‚ô¶] Pair, Tens, kickers Ace, King, Jack [T‚ô£ T‚ô• A‚ô† K‚ô† J‚ô£] [6‚ô• 5‚ô¶]
	// Player 2: [2‚ô† K‚ô¶] Pair, Kings, kickers Ace, Jack, Ten [K‚ô¶ K‚ô† A‚ô† J‚ô£ T‚ô£] [6‚ô• 2‚ô†]
	// Player 3: [Q‚ô£ Q‚ô•] Straight, Ace-high [A‚ô† K‚ô† Q‚ô£ J‚ô£ T‚ô£] [Q‚ô• 6‚ô•]
	// Player 4: [J‚ô† 7‚ô£] Pair, Jacks, kickers Ace, King, Ten [J‚ô£ J‚ô† A‚ô† K‚ô† T‚ô£] [7‚ô£ 6‚ô•]
	// Player 5: [4‚ô• 6‚ô†] Pair, Sixes, kickers Ace, King, Jack [6‚ô• 6‚ô† A‚ô† K‚ô† J‚ô£] [T‚ô£ 4‚ô•]
	// Player 6: [Q‚ô† 3‚ô£] Straight, Ace-high [A‚ô† K‚ô† Q‚ô† J‚ô£ T‚ô£] [6‚ô• 3‚ô£]
	// Result:   Players 3, 6 push with Straight, Ace-high
	// ------ Holdem 4 ------
	// Board:    [9‚ô¶ J‚ô£ A‚ô• 9‚ô• J‚ô†]
	// Player 1: [K‚ô† 8‚ô¶] Two Pair, Jacks over Nines, kicker Ace [J‚ô£ J‚ô† 9‚ô¶ 9‚ô• A‚ô•] [K‚ô† 8‚ô¶]
	// Player 2: [7‚ô¶ 9‚ô†] Full House, Nines full of Jacks [9‚ô¶ 9‚ô• 9‚ô† J‚ô£ J‚ô†] [A‚ô• 7‚ô¶]
	// Player 3: [A‚ô¶ 8‚ô•] Two Pair, Aces over Jacks, kicker Nine [A‚ô¶ A‚ô• J‚ô£ J‚ô† 9‚ô¶] [9‚ô• 8‚ô•]
	// Player 4: [4‚ô• 6‚ô£] Two Pair, Jacks over Nines, kicker Ace [J‚ô£ J‚ô† 9‚ô¶ 9‚ô• A‚ô•] [6‚ô£ 4‚ô•]
	// Player 5: [3‚ô• 5‚ô•] Two Pair, Jacks over Nines, kicker Ace [J‚ô£ J‚ô† 9‚ô¶ 9‚ô• A‚ô•] [5‚ô• 3‚ô•]
	// Player 6: [T‚ô£ J‚ô¶] Full House, Jacks full of Nines [J‚ô£ J‚ô¶ J‚ô† 9‚ô¶ 9‚ô•] [A‚ô• T‚ô£]
	// Result:   Player 6 wins with Full House, Jacks full of Nines
	// ------ Holdem 5 ------
	// Board:    [3‚ô† 9‚ô• A‚ô¶ 6‚ô• Q‚ô¶]
	// Player 1: [T‚ô¶ 4‚ô•] Ace-high, kickers Queen, Ten, Nine, Six [A‚ô¶ Q‚ô¶ T‚ô¶ 9‚ô• 6‚ô•] [4‚ô• 3‚ô†]
	// Player 2: [8‚ô¶ 7‚ô¶] Ace-high, kickers Queen, Nine, Eight, Seven [A‚ô¶ Q‚ô¶ 9‚ô• 8‚ô¶ 7‚ô¶] [6‚ô• 3‚ô†]
	// Player 3: [K‚ô† K‚ô•] Pair, Kings, kickers Ace, Queen, Nine [K‚ô• K‚ô† A‚ô¶ Q‚ô¶ 9‚ô•] [6‚ô• 3‚ô†]
	// Player 4: [T‚ô£ 5‚ô¶] Ace-high, kickers Queen, Ten, Nine, Six [A‚ô¶ Q‚ô¶ T‚ô£ 9‚ô• 6‚ô•] [5‚ô¶ 3‚ô†]
	// Player 5: [7‚ô• T‚ô•] Ace-high, kickers Queen, Ten, Nine, Seven [A‚ô¶ Q‚ô¶ T‚ô• 9‚ô• 7‚ô•] [6‚ô• 3‚ô†]
	// Player 6: [8‚ô£ 5‚ô£] Ace-high, kickers Queen, Nine, Eight, Six [A‚ô¶ Q‚ô¶ 9‚ô• 8‚ô£ 6‚ô•] [5‚ô£ 3‚ô†]
	// Result:   Player 3 wins with Pair, Kings, kickers Ace, Queen, Nine
	// ------ Holdem 6 ------
	// Board:    [T‚ô• 6‚ô• 7‚ô• 2‚ô• 7‚ô£]
	// Player 1: [6‚ô£ K‚ô•] Flush, King-high, kickers Ten, Seven, Six, Two [K‚ô• T‚ô• 7‚ô• 6‚ô• 2‚ô•] [7‚ô£ 6‚ô£]
	// Player 2: [6‚ô† 5‚ô•] Flush, Ten-high, kickers Seven, Six, Five, Two [T‚ô• 7‚ô• 6‚ô• 5‚ô• 2‚ô•] [7‚ô£ 6‚ô†]
	// Result:   Player 1 wins with Flush, King-high, kickers Ten, Seven, Six, Two
	// ------ Holdem 7 ------
	// Board:    [4‚ô¶ A‚ô• A‚ô£ 4‚ô† A‚ô¶]
	// Player 1: [T‚ô• 9‚ô£] Full House, Aces full of Fours [A‚ô£ A‚ô¶ A‚ô• 4‚ô¶ 4‚ô†] [T‚ô• 9‚ô£]
	// Player 2: [T‚ô† A‚ô†] Four of a Kind, Aces, kicker Ten [A‚ô£ A‚ô¶ A‚ô• A‚ô† T‚ô†] [4‚ô¶ 4‚ô†]
	// Result:   Player 2 wins with Four of a Kind, Aces, kicker Ten
	// ------ Holdem 8 ------
	// Board:    [Q‚ô• T‚ô• T‚ô† J‚ô• K‚ô•]
	// Player 1: [A‚ô• 8‚ô•] Straight Flush, Ace-high, Royal [A‚ô• K‚ô• Q‚ô• J‚ô• T‚ô•] [T‚ô† 8‚ô•]
	// Player 2: [9‚ô† 8‚ô¶] Straight, King-high [K‚ô• Q‚ô• J‚ô• T‚ô• 9‚ô†] [T‚ô† 8‚ô¶]
	// Player 3: [Q‚ô£ 4‚ô¶] Two Pair, Queens over Tens, kicker King [Q‚ô£ Q‚ô• T‚ô• T‚ô† K‚ô•] [J‚ô• 4‚ô¶]
	// Player 4: [2‚ô† Q‚ô¶] Two Pair, Queens over Tens, kicker King [Q‚ô¶ Q‚ô• T‚ô• T‚ô† K‚ô•] [J‚ô• 2‚ô†]
	// Player 5: [6‚ô• A‚ô¶] Flush, King-high, kickers Queen, Jack, Ten, Six [K‚ô• Q‚ô• J‚ô• T‚ô• 6‚ô•] [A‚ô¶ T‚ô†]
	// Player 6: [3‚ô¶ T‚ô£] Three of a Kind, Tens, kickers King, Queen [T‚ô£ T‚ô• T‚ô† K‚ô• Q‚ô•] [J‚ô• 3‚ô¶]
	// Result:   Player 1 wins with Straight Flush, Ace-high, Royal
	// ------ Holdem 9 ------
	// Board:    [A‚ô£ 2‚ô£ 4‚ô£ 5‚ô£ 9‚ô•]
	// Player 1: [T‚ô£ 6‚ô†] Flush, Ace-high, kickers Ten, Five, Four, Two [A‚ô£ T‚ô£ 5‚ô£ 4‚ô£ 2‚ô£] [9‚ô• 6‚ô†]
	// Player 2: [J‚ô¶ 3‚ô£] Straight Flush, Five-high, Steel Wheel [5‚ô£ 4‚ô£ 3‚ô£ 2‚ô£ A‚ô£] [J‚ô¶ 9‚ô•]
	// Player 3: [4‚ô• T‚ô†] Pair, Fours, kickers Ace, Ten, Nine [4‚ô£ 4‚ô• A‚ô£ T‚ô† 9‚ô•] [5‚ô£ 2‚ô£]
	// Result:   Player 2 wins with Straight Flush, Five-high, Steel Wheel
	// ------ Holdem 10 ------
	// Board:    [8‚ô£ J‚ô£ 8‚ô• 7‚ô• 9‚ô•]
	// Player 1: [8‚ô¶ T‚ô•] Straight, Jack-high [J‚ô£ T‚ô• 9‚ô• 8‚ô£ 7‚ô•] [8‚ô¶ 8‚ô•]
	// Player 2: [8‚ô† 3‚ô£] Three of a Kind, Eights, kickers Jack, Nine [8‚ô£ 8‚ô• 8‚ô† J‚ô£ 9‚ô•] [7‚ô• 3‚ô£]
	// Player 3: [6‚ô• K‚ô•] Flush, King-high, kickers Nine, Eight, Seven, Six [K‚ô• 9‚ô• 8‚ô• 7‚ô• 6‚ô•] [J‚ô£ 8‚ô£]
	// Result:   Player 3 wins with Flush, King-high, kickers Nine, Eight, Seven, Six
	// ------ Holdem 11 ------
	// Board:    [5‚ô• 3‚ô£ J‚ô• 6‚ô¶ 6‚ô£]
	// Player 1: [8‚ô• T‚ô•] Pair, Sixes, kickers Jack, Ten, Eight [6‚ô£ 6‚ô¶ J‚ô• T‚ô• 8‚ô•] [5‚ô• 3‚ô£]
	// Player 2: [4‚ô• Q‚ô£] Pair, Sixes, kickers Queen, Jack, Five [6‚ô£ 6‚ô¶ Q‚ô£ J‚ô• 5‚ô•] [4‚ô• 3‚ô£]
	// Player 3: [T‚ô£ Q‚ô†] Pair, Sixes, kickers Queen, Jack, Ten [6‚ô£ 6‚ô¶ Q‚ô† J‚ô• T‚ô£] [5‚ô• 3‚ô£]
	// Player 4: [3‚ô• 5‚ô¶] Two Pair, Sixes over Fives, kicker Jack [6‚ô£ 6‚ô¶ 5‚ô¶ 5‚ô• J‚ô•] [3‚ô£ 3‚ô•]
	// Player 5: [A‚ô† T‚ô†] Pair, Sixes, kickers Ace, Jack, Ten [6‚ô£ 6‚ô¶ A‚ô† J‚ô• T‚ô†] [5‚ô• 3‚ô£]
	// Player 6: [6‚ô† 2‚ô†] Three of a Kind, Sixes, kickers Jack, Five [6‚ô£ 6‚ô¶ 6‚ô† J‚ô• 5‚ô•] [3‚ô£ 2‚ô†]
	// Player 7: [J‚ô† 5‚ô£] Two Pair, Jacks over Sixes, kicker Five [J‚ô• J‚ô† 6‚ô£ 6‚ô¶ 5‚ô£] [5‚ô• 3‚ô£]
	// Player 8: [8‚ô† 9‚ô¶] Pair, Sixes, kickers Jack, Nine, Eight [6‚ô£ 6‚ô¶ J‚ô• 9‚ô¶ 8‚ô†] [5‚ô• 3‚ô£]
	// Player 9: [6‚ô• J‚ô£] Full House, Sixes full of Jacks [6‚ô£ 6‚ô¶ 6‚ô• J‚ô£ J‚ô•] [5‚ô• 3‚ô£]
	// Player 10: [2‚ô£ A‚ô£] Pair, Sixes, kickers Ace, Jack, Five [6‚ô£ 6‚ô¶ A‚ô£ J‚ô• 5‚ô•] [3‚ô£ 2‚ô£]
	// Result:   Player 9 wins with Full House, Sixes full of Jacks
}

func ExampleType_short() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{155, 4},
		{384, 8},
		{880, 4},
		{3453, 3},
		{5662, 3},
		{65481, 2},
		{27947, 4},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, board := cardrank.Short.Deal(r, 1, game.players)
		evs := cardrank.Short.EvalPockets(pockets, board)
		fmt.Printf("------ Short %d ------\n", i+1)
		fmt.Printf("Board:    %b\n", board)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Short 1 ------
	// Board:    [9‚ô• A‚ô¶ A‚ô• 8‚ô£ A‚ô£]
	// Player 1: [8‚ô• A‚ô†] Four of a Kind, Aces, kicker Nine [A‚ô£ A‚ô¶ A‚ô• A‚ô† 9‚ô•] [8‚ô£ 8‚ô•]
	// Player 2: [7‚ô• J‚ô¶] Three of a Kind, Aces, kickers Jack, Nine [A‚ô£ A‚ô¶ A‚ô• J‚ô¶ 9‚ô•] [8‚ô£ 7‚ô•]
	// Result:   Player 1 wins with Four of a Kind, Aces, kicker Nine
	// ------ Short 2 ------
	// Board:    [9‚ô£ 6‚ô¶ A‚ô† J‚ô† 6‚ô†]
	// Player 1: [T‚ô• A‚ô£] Two Pair, Aces over Sixes, kicker Jack [A‚ô£ A‚ô† 6‚ô¶ 6‚ô† J‚ô†] [T‚ô• 9‚ô£]
	// Player 2: [6‚ô£ 7‚ô£] Three of a Kind, Sixes, kickers Ace, Jack [6‚ô£ 6‚ô¶ 6‚ô† A‚ô† J‚ô†] [9‚ô£ 7‚ô£]
	// Player 3: [6‚ô• T‚ô†] Three of a Kind, Sixes, kickers Ace, Jack [6‚ô¶ 6‚ô• 6‚ô† A‚ô† J‚ô†] [T‚ô† 9‚ô£]
	// Player 4: [9‚ô• K‚ô†] Two Pair, Nines over Sixes, kicker Ace [9‚ô£ 9‚ô• 6‚ô¶ 6‚ô† A‚ô†] [K‚ô† J‚ô†]
	// Result:   Players 2, 3 push with Three of a Kind, Sixes, kickers Ace, Jack
	// ------ Short 3 ------
	// Board:    [T‚ô• J‚ô£ 7‚ô• 9‚ô• K‚ô£]
	// Player 1: [8‚ô• T‚ô£] Straight, Jack-high [J‚ô£ T‚ô£ 9‚ô• 8‚ô• 7‚ô•] [K‚ô£ T‚ô•]
	// Player 2: [T‚ô† Q‚ô†] Straight, King-high [K‚ô£ Q‚ô† J‚ô£ T‚ô• 9‚ô•] [T‚ô† 7‚ô•]
	// Player 3: [J‚ô† 7‚ô£] Two Pair, Jacks over Sevens, kicker King [J‚ô£ J‚ô† 7‚ô£ 7‚ô• K‚ô£] [T‚ô• 9‚ô•]
	// Player 4: [6‚ô£ Q‚ô¶] Straight, King-high [K‚ô£ Q‚ô¶ J‚ô£ T‚ô• 9‚ô•] [7‚ô• 6‚ô£]
	// Player 5: [7‚ô¶ 6‚ô†] Pair, Sevens, kickers King, Jack, Ten [7‚ô¶ 7‚ô• K‚ô£ J‚ô£ T‚ô•] [9‚ô• 6‚ô†]
	// Player 6: [8‚ô† 8‚ô¶] Straight, Jack-high [J‚ô£ T‚ô• 9‚ô• 8‚ô¶ 7‚ô•] [K‚ô£ 8‚ô†]
	// Player 7: [9‚ô£ K‚ô•] Two Pair, Kings over Nines, kicker Jack [K‚ô£ K‚ô• 9‚ô£ 9‚ô• J‚ô£] [T‚ô• 7‚ô•]
	// Player 8: [A‚ô• K‚ô¶] Pair, Kings, kickers Ace, Jack, Ten [K‚ô£ K‚ô¶ A‚ô• J‚ô£ T‚ô•] [9‚ô• 7‚ô•]
	// Result:   Players 2, 4 push with Straight, King-high
	// ------ Short 4 ------
	// Board:    [T‚ô¶ 9‚ô£ 9‚ô¶ Q‚ô¶ 8‚ô¶]
	// Player 1: [J‚ô† 9‚ô•] Straight, Queen-high [Q‚ô¶ J‚ô† T‚ô¶ 9‚ô£ 8‚ô¶] [9‚ô¶ 9‚ô•]
	// Player 2: [T‚ô• 8‚ô†] Two Pair, Tens over Nines, kicker Queen [T‚ô¶ T‚ô• 9‚ô£ 9‚ô¶ Q‚ô¶] [8‚ô¶ 8‚ô†]
	// Player 3: [6‚ô£ J‚ô¶] Straight Flush, Queen-high, Silver Tongue [Q‚ô¶ J‚ô¶ T‚ô¶ 9‚ô¶ 8‚ô¶] [9‚ô£ 6‚ô£]
	// Player 4: [A‚ô£ A‚ô¶] Flush, Ace-high, kickers Queen, Ten, Nine, Eight [A‚ô¶ Q‚ô¶ T‚ô¶ 9‚ô¶ 8‚ô¶] [A‚ô£ 9‚ô£]
	// Result:   Player 3 wins with Straight Flush, Queen-high, Silver Tongue
	// ------ Short 5 ------
	// Board:    [6‚ô† A‚ô£ 7‚ô¶ A‚ô† 6‚ô¶]
	// Player 1: [9‚ô£ T‚ô¶] Two Pair, Aces over Sixes, kicker Ten [A‚ô£ A‚ô† 6‚ô¶ 6‚ô† T‚ô¶] [9‚ô£ 7‚ô¶]
	// Player 2: [T‚ô† K‚ô†] Two Pair, Aces over Sixes, kicker King [A‚ô£ A‚ô† 6‚ô¶ 6‚ô† K‚ô†] [T‚ô† 7‚ô¶]
	// Player 3: [J‚ô• A‚ô•] Full House, Aces full of Sixes [A‚ô£ A‚ô• A‚ô† 6‚ô¶ 6‚ô†] [J‚ô• 7‚ô¶]
	// Result:   Player 3 wins with Full House, Aces full of Sixes
	// ------ Short 6 ------
	// Board:    [A‚ô£ 6‚ô£ 9‚ô£ T‚ô¶ 8‚ô£]
	// Player 1: [6‚ô• 9‚ô†] Two Pair, Nines over Sixes, kicker Ace [9‚ô£ 9‚ô† 6‚ô£ 6‚ô• A‚ô£] [T‚ô¶ 8‚ô£]
	// Player 2: [7‚ô£ J‚ô•] Straight Flush, Nine-high, Iron Maiden [9‚ô£ 8‚ô£ 7‚ô£ 6‚ô£ A‚ô£] [J‚ô• T‚ô¶]
	// Player 3: [6‚ô† Q‚ô†] Pair, Sixes, kickers Ace, Queen, Ten [6‚ô£ 6‚ô† A‚ô£ Q‚ô† T‚ô¶] [9‚ô£ 8‚ô£]
	// Result:   Player 2 wins with Straight Flush, Nine-high, Iron Maiden
	// ------ Short 7 ------
	// Board:    [K‚ô• K‚ô¶ K‚ô† K‚ô£ J‚ô£]
	// Player 1: [7‚ô¶ 8‚ô¶] Four of a Kind, Kings, kicker Jack [K‚ô£ K‚ô¶ K‚ô• K‚ô† J‚ô£] [8‚ô¶ 7‚ô¶]
	// Player 2: [T‚ô¶ 6‚ô•] Four of a Kind, Kings, kicker Jack [K‚ô£ K‚ô¶ K‚ô• K‚ô† J‚ô£] [T‚ô¶ 6‚ô•]
	// Result:   Players 1, 2 push with Four of a Kind, Kings, kicker Jack
	// ------ Short 8 ------
	// Board:    [8‚ô¶ 8‚ô• 8‚ô† Q‚ô† T‚ô¶]
	// Player 1: [J‚ô¶ 9‚ô£] Straight, Queen-high [Q‚ô† J‚ô¶ T‚ô¶ 9‚ô£ 8‚ô¶] [8‚ô• 8‚ô†]
	// Player 2: [T‚ô£ J‚ô£] Full House, Eights full of Tens [8‚ô¶ 8‚ô• 8‚ô† T‚ô£ T‚ô¶] [Q‚ô† J‚ô£]
	// Player 3: [K‚ô† T‚ô•] Full House, Eights full of Tens [8‚ô¶ 8‚ô• 8‚ô† T‚ô¶ T‚ô•] [K‚ô† Q‚ô†]
	// Player 4: [T‚ô† 7‚ô•] Full House, Eights full of Tens [8‚ô¶ 8‚ô• 8‚ô† T‚ô¶ T‚ô†] [Q‚ô† 7‚ô•]
	// Result:   Players 2, 3, 4 push with Full House, Eights full of Tens
}

func ExampleType_royal() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{155, 3},
		{384, 4},
		{880, 5},
		{3453, 2},
		{5662, 3},
		{65481, 4},
		{27947, 5},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, board := cardrank.Royal.Deal(r, 1, game.players)
		evs := cardrank.Royal.EvalPockets(pockets, board)
		fmt.Printf("------ Royal %d ------\n", i+1)
		fmt.Printf("Board:    %b\n", board)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Royal 1 ------
	// Board:    [K‚ô¶ A‚ô¶ T‚ô• T‚ô£ J‚ô†]
	// Player 1: [A‚ô† T‚ô†] Full House, Tens full of Aces [T‚ô£ T‚ô• T‚ô† A‚ô¶ A‚ô†] [K‚ô¶ J‚ô†]
	// Player 2: [A‚ô• K‚ô†] Two Pair, Aces over Kings, kicker Jack [A‚ô¶ A‚ô• K‚ô¶ K‚ô† J‚ô†] [T‚ô£ T‚ô•]
	// Result:   Player 1 wins with Full House, Tens full of Aces
	// ------ Royal 2 ------
	// Board:    [A‚ô£ K‚ô† J‚ô¶ Q‚ô£ J‚ô£]
	// Player 1: [A‚ô† Q‚ô†] Two Pair, Aces over Queens, kicker King [A‚ô£ A‚ô† Q‚ô£ Q‚ô† K‚ô†] [J‚ô£ J‚ô¶]
	// Player 2: [T‚ô† J‚ô•] Straight, Ace-high [A‚ô£ K‚ô† Q‚ô£ J‚ô£ T‚ô†] [J‚ô¶ J‚ô•]
	// Player 3: [K‚ô£ T‚ô•] Straight, Ace-high [A‚ô£ K‚ô£ Q‚ô£ J‚ô£ T‚ô•] [K‚ô† J‚ô¶]
	// Result:   Players 2, 3 push with Straight, Ace-high
	// ------ Royal 3 ------
	// Board:    [K‚ô† T‚ô¶ T‚ô£ Q‚ô¶ A‚ô•]
	// Player 1: [T‚ô† T‚ô•] Four of a Kind, Tens, kicker Ace [T‚ô£ T‚ô¶ T‚ô• T‚ô† A‚ô•] [K‚ô† Q‚ô¶]
	// Player 2: [J‚ô£ Q‚ô£] Straight, Ace-high [A‚ô• K‚ô† Q‚ô£ J‚ô£ T‚ô£] [Q‚ô¶ T‚ô¶]
	// Player 3: [A‚ô¶ K‚ô¶] Two Pair, Aces over Kings, kicker Queen [A‚ô¶ A‚ô• K‚ô¶ K‚ô† Q‚ô¶] [T‚ô£ T‚ô¶]
	// Player 4: [K‚ô• K‚ô£] Full House, Kings full of Tens [K‚ô£ K‚ô• K‚ô† T‚ô£ T‚ô¶] [A‚ô• Q‚ô¶]
	// Result:   Player 1 wins with Four of a Kind, Tens, kicker Ace
	// ------ Royal 4 ------
	// Board:    [J‚ô• A‚ô† T‚ô• T‚ô£ K‚ô†]
	// Player 1: [Q‚ô¶ T‚ô†] Straight, Ace-high [A‚ô† K‚ô† Q‚ô¶ J‚ô• T‚ô£] [T‚ô• T‚ô†]
	// Player 2: [K‚ô• T‚ô¶] Full House, Tens full of Kings [T‚ô£ T‚ô¶ T‚ô• K‚ô• K‚ô†] [A‚ô† J‚ô•]
	// Player 3: [A‚ô£ Q‚ô†] Straight, Ace-high [A‚ô£ K‚ô† Q‚ô† J‚ô• T‚ô£] [A‚ô† T‚ô•]
	// Player 4: [A‚ô¶ J‚ô†] Two Pair, Aces over Jacks, kicker King [A‚ô¶ A‚ô† J‚ô• J‚ô† K‚ô†] [T‚ô£ T‚ô•]
	// Player 5: [K‚ô¶ J‚ô¶] Two Pair, Kings over Jacks, kicker Ace [K‚ô¶ K‚ô† J‚ô¶ J‚ô• A‚ô†] [T‚ô£ T‚ô•]
	// Result:   Player 2 wins with Full House, Tens full of Kings
	// ------ Royal 5 ------
	// Board:    [J‚ô£ K‚ô• K‚ô† J‚ô• Q‚ô£]
	// Player 1: [A‚ô• T‚ô¶] Straight, Ace-high [A‚ô• K‚ô• Q‚ô£ J‚ô£ T‚ô¶] [K‚ô† J‚ô•]
	// Player 2: [J‚ô¶ Q‚ô†] Full House, Jacks full of Kings [J‚ô£ J‚ô¶ J‚ô• K‚ô• K‚ô†] [Q‚ô£ Q‚ô†]
	// Result:   Player 2 wins with Full House, Jacks full of Kings
	// ------ Royal 6 ------
	// Board:    [K‚ô• A‚ô† K‚ô¶ K‚ô† A‚ô£]
	// Player 1: [J‚ô• J‚ô†] Full House, Kings full of Aces [K‚ô¶ K‚ô• K‚ô† A‚ô£ A‚ô†] [J‚ô• J‚ô†]
	// Player 2: [Q‚ô¶ A‚ô•] Full House, Aces full of Kings [A‚ô£ A‚ô• A‚ô† K‚ô¶ K‚ô•] [K‚ô† Q‚ô¶]
	// Player 3: [Q‚ô† T‚ô£] Full House, Kings full of Aces [K‚ô¶ K‚ô• K‚ô† A‚ô£ A‚ô†] [Q‚ô† T‚ô£]
	// Result:   Player 2 wins with Full House, Aces full of Kings
	// ------ Royal 7 ------
	// Board:    [J‚ô• T‚ô¶ Q‚ô† K‚ô£ K‚ô•]
	// Player 1: [K‚ô¶ J‚ô£] Full House, Kings full of Jacks [K‚ô£ K‚ô¶ K‚ô• J‚ô£ J‚ô•] [Q‚ô† T‚ô¶]
	// Player 2: [T‚ô• T‚ô†] Full House, Tens full of Kings [T‚ô¶ T‚ô• T‚ô† K‚ô£ K‚ô•] [Q‚ô† J‚ô•]
	// Player 3: [A‚ô† A‚ô•] Straight, Ace-high [A‚ô• K‚ô£ Q‚ô† J‚ô• T‚ô¶] [A‚ô† K‚ô•]
	// Player 4: [Q‚ô£ A‚ô¶] Straight, Ace-high [A‚ô¶ K‚ô£ Q‚ô£ J‚ô• T‚ô¶] [K‚ô• Q‚ô†]
	// Result:   Player 1 wins with Full House, Kings full of Jacks
	// ------ Royal 8 ------
	// Board:    [A‚ô† K‚ô¶ Q‚ô¶ A‚ô¶ A‚ô£]
	// Player 1: [Q‚ô† J‚ô†] Full House, Aces full of Queens [A‚ô£ A‚ô¶ A‚ô† Q‚ô¶ Q‚ô†] [K‚ô¶ J‚ô†]
	// Player 2: [T‚ô¶ A‚ô•] Four of a Kind, Aces, kicker King [A‚ô£ A‚ô¶ A‚ô• A‚ô† K‚ô¶] [Q‚ô¶ T‚ô¶]
	// Player 3: [J‚ô• K‚ô†] Full House, Aces full of Kings [A‚ô£ A‚ô¶ A‚ô† K‚ô¶ K‚ô†] [Q‚ô¶ J‚ô•]
	// Player 4: [Q‚ô• J‚ô¶] Full House, Aces full of Queens [A‚ô£ A‚ô¶ A‚ô† Q‚ô¶ Q‚ô•] [K‚ô¶ J‚ô¶]
	// Player 5: [K‚ô£ T‚ô•] Full House, Aces full of Kings [A‚ô£ A‚ô¶ A‚ô† K‚ô£ K‚ô¶] [Q‚ô¶ T‚ô•]
	// Result:   Player 2 wins with Four of a Kind, Aces, kicker King
}

func ExampleType_omaha() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, board := cardrank.Omaha.Deal(r, 1, game.players)
		evs := cardrank.Omaha.EvalPockets(pockets, board)
		fmt.Printf("------ Omaha %d ------\n", i+1)
		fmt.Printf("Board:    %b\n", board)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Omaha 1 ------
	// Board:    [3‚ô• 5‚ô• 4‚ô• 7‚ô• K‚ô£]
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô†] Flush, Ace-high, kickers King, Seven, Five, Four [A‚ô• K‚ô• 7‚ô• 5‚ô• 4‚ô•] [K‚ô£ Q‚ô† J‚ô£ 3‚ô•]
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô†] Two Pair, Sevens over Fives, kicker King [7‚ô£ 7‚ô• 5‚ô• 5‚ô† K‚ô£] [4‚ô£ 4‚ô• 3‚ô• 2‚ô†]
	// Result:   Player 1 wins with Flush, Ace-high, kickers King, Seven, Five, Four
	// ------ Omaha 2 ------
	// Board:    [3‚ô• 7‚ô£ 3‚ô£ 9‚ô† 9‚ô£]
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô†] Four of a Kind, Threes, kicker Nine [3‚ô£ 3‚ô¶ 3‚ô• 3‚ô† 9‚ô†] [Q‚ô† T‚ô† 9‚ô£ 7‚ô£]
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£] Flush, Queen-high, kickers Nine, Seven, Six, Three [Q‚ô£ 9‚ô£ 7‚ô£ 6‚ô£ 3‚ô£] [9‚ô† 8‚ô• 6‚ô¶ 3‚ô•]
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô•] Pair, Nines, kickers Ace, King, Seven [9‚ô£ 9‚ô† A‚ô• K‚ô† 7‚ô£] [Q‚ô¶ 8‚ô£ 3‚ô£ 3‚ô•]
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô•] Pair, Nines, kickers King, Ten, Seven [9‚ô£ 9‚ô† K‚ô¶ T‚ô¶ 7‚ô£] [8‚ô¶ 4‚ô• 3‚ô£ 3‚ô•]
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô†] Pair, Nines, kickers Queen, Jack, Seven [9‚ô£ 9‚ô† Q‚ô• J‚ô¶ 7‚ô£] [6‚ô† 3‚ô£ 3‚ô• 2‚ô•]
	// Result:   Player 1 wins with Four of a Kind, Threes, kicker Nine
	// ------ Omaha 3 ------
	// Board:    [J‚ô£ T‚ô• 4‚ô• K‚ô£ Q‚ô£]
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶] Two Pair, Kings over Queens, kicker Jack [K‚ô£ K‚ô† Q‚ô£ Q‚ô† J‚ô£] [J‚ô¶ T‚ô• 4‚ô£ 4‚ô•]
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô†] Pair, Jacks, kickers King, Queen, Eight [J‚ô£ J‚ô† K‚ô£ Q‚ô£ 8‚ô•] [T‚ô• 4‚ô• 3‚ô£ 2‚ô†]
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶] Two Pair, Queens over Tens, kicker King [Q‚ô£ Q‚ô¶ T‚ô• T‚ô† K‚ô£] [J‚ô£ 4‚ô• 3‚ô† 2‚ô£]
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶] Pair, Tens, kickers King, Queen, Five [T‚ô¶ T‚ô• K‚ô£ Q‚ô£ 5‚ô£] [J‚ô£ 5‚ô• 4‚ô• 2‚ô¶]
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£] Ace-high, kickers King, Queen, Jack, Seven [A‚ô£ K‚ô£ Q‚ô£ J‚ô£ 7‚ô†] [T‚ô• 6‚ô† 4‚ô• 3‚ô•]
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£] Two Pair, Kings over Tens, kicker Queen [K‚ô£ K‚ô¶ T‚ô£ T‚ô• Q‚ô£] [J‚ô£ 8‚ô¶ 4‚ô• 4‚ô†]
	// Result:   Player 1 wins with Two Pair, Kings over Queens, kicker Jack
	// ------ Omaha 4 ------
	// Board:    [2‚ô¶ 6‚ô¶ 6‚ô£ Q‚ô£ 7‚ô£]
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£] Flush, Ace-high, kickers Queen, Eight, Seven, Six [A‚ô£ Q‚ô£ 8‚ô£ 7‚ô£ 6‚ô£] [K‚ô• 6‚ô¶ 6‚ô† 2‚ô¶]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô•] Two Pair, Queens over Sixes, kicker Jack [Q‚ô£ Q‚ô• 6‚ô£ 6‚ô¶ J‚ô£] [7‚ô£ 5‚ô• 4‚ô• 2‚ô¶]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô†] Full House, Sixes full of Queens [6‚ô£ 6‚ô¶ 6‚ô• Q‚ô£ Q‚ô†] [7‚ô£ 5‚ô£ 2‚ô£ 2‚ô¶]
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô†] Two Pair, Jacks over Sixes, kicker Queen [J‚ô• J‚ô† 6‚ô£ 6‚ô¶ Q‚ô£] [K‚ô† 9‚ô† 7‚ô£ 2‚ô¶]
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶] Pair, Sixes, kickers King, Queen, Eight [6‚ô£ 6‚ô¶ K‚ô£ Q‚ô£ 8‚ô¶] [7‚ô£ 4‚ô¶ 3‚ô¶ 2‚ô¶]
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô•] Two Pair, Queens over Sevens, kicker Six [Q‚ô£ Q‚ô¶ 7‚ô£ 7‚ô• 6‚ô¶] [A‚ô† T‚ô£ 6‚ô£ 2‚ô¶]
	// Result:   Player 3 wins with Full House, Sixes full of Queens
	// ------ Omaha 5 ------
	// Board:    [4‚ô£ K‚ô£ 6‚ô¶ 9‚ô¶ 5‚ô†]
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£] Two Pair, Fives over Fours, kicker King [5‚ô¶ 5‚ô† 4‚ô£ 4‚ô¶ K‚ô£] [J‚ô£ 9‚ô¶ 6‚ô¶ 3‚ô¶]
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£] Pair, Kings, kickers Jack, Nine, Six [K‚ô£ K‚ô† J‚ô† 9‚ô¶ 6‚ô¶] [T‚ô• 5‚ô† 4‚ô£ 2‚ô£]
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô†] Pair, Nines, kickers Ace, King, Six [9‚ô¶ 9‚ô† A‚ô£ K‚ô£ 6‚ô¶] [T‚ô† 5‚ô† 4‚ô£ 3‚ô†]
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£] Straight, Nine-high [9‚ô¶ 8‚ô† 7‚ô¶ 6‚ô¶ 5‚ô†] [K‚ô£ 7‚ô£ 4‚ô£ 3‚ô£]
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô†] Pair, Fives, kickers King, Queen, Nine [5‚ô£ 5‚ô† K‚ô£ Q‚ô† 9‚ô¶] [J‚ô• 6‚ô¶ 4‚ô£ 2‚ô†]
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô•] Pair, Sevens, kickers King, Nine, Six [7‚ô• 7‚ô† K‚ô£ 9‚ô¶ 6‚ô¶] [6‚ô† 5‚ô† 4‚ô£ 2‚ô•]
	// Result:   Player 4 wins with Straight, Nine-high
}

func ExampleType_omahaHiLo() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, board := cardrank.OmahaHiLo.Deal(r, 1, game.players)
		evs := cardrank.OmahaHiLo.EvalPockets(pockets, board)
		fmt.Printf("------ OmahaHiLo %d ------\n", i+1)
		fmt.Printf("Board: %b\n", board)
		for j := 0; j < game.players; j++ {
			hi, lo := evs[j].Desc(false), evs[j].Desc(true)
			fmt.Printf("Player %d: %b\n", j+1, pockets[j])
			fmt.Printf("  Hi: %s %b %b\n", hi, hi.Best, hi.Unused)
			fmt.Printf("  Lo: %s %b %b\n", lo, lo.Best, lo.Unused)
		}
		hiOrder, hiPivot := cardrank.Order(evs, false)
		loOrder, loPivot := cardrank.Order(evs, true)
		typ := "wins"
		if loPivot == 0 {
			typ = "scoops"
		}
		desc := evs[hiOrder[0]].Desc(false)
		if hiPivot == 1 {
			fmt.Printf("Result (Hi): Player %d %s with %s\n", hiOrder[0]+1, typ, desc)
		} else {
			var s []string
			for j := 0; j < hiPivot; j++ {
				s = append(s, strconv.Itoa(hiOrder[j]+1))
			}
			fmt.Printf("Result (Hi): Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
		if loPivot == 1 {
			desc := evs[loOrder[0]].Desc(true)
			fmt.Printf("Result (Lo): Player %d wins with %s\n", loOrder[0]+1, desc)
		} else if loPivot > 1 {
			var s []string
			for j := 0; j < loPivot; j++ {
				s = append(s, strconv.Itoa(loOrder[j]+1))
			}
			desc := evs[loOrder[0]].Desc(true)
			fmt.Printf("Result (Lo): Players %s push with %s\n", strings.Join(s, ", "), desc)
		} else {
			fmt.Printf("Result (Lo): no player made a lo\n")
		}
	}
	// Output:
	// ------ OmahaHiLo 1 ------
	// Board: [3‚ô• 5‚ô• 4‚ô• 7‚ô• K‚ô£]
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô†]
	//   Hi: Flush, Ace-high, kickers King, Seven, Five, Four [A‚ô• K‚ô• 7‚ô• 5‚ô• 4‚ô•] [K‚ô£ Q‚ô† J‚ô£ 3‚ô•]
	//   Lo: None [] []
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô†]
	//   Hi: Two Pair, Sevens over Fives, kicker King [7‚ô£ 7‚ô• 5‚ô• 5‚ô† K‚ô£] [4‚ô£ 4‚ô• 3‚ô• 2‚ô†]
	//   Lo: Seven, Five, Four, Three, Two-low [7‚ô£ 5‚ô• 4‚ô• 3‚ô• 2‚ô†] [K‚ô£ 7‚ô• 5‚ô† 4‚ô£]
	// Result (Hi): Player 1 wins with Flush, Ace-high, kickers King, Seven, Five, Four
	// Result (Lo): Player 2 wins with Seven, Five, Four, Three, Two-low
	// ------ OmahaHiLo 2 ------
	// Board: [3‚ô• 7‚ô£ 3‚ô£ 9‚ô† 9‚ô£]
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô†]
	//   Hi: Four of a Kind, Threes, kicker Nine [3‚ô£ 3‚ô¶ 3‚ô• 3‚ô† 9‚ô†] [Q‚ô† T‚ô† 9‚ô£ 7‚ô£]
	//   Lo: None [] []
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£]
	//   Hi: Flush, Queen-high, kickers Nine, Seven, Six, Three [Q‚ô£ 9‚ô£ 7‚ô£ 6‚ô£ 3‚ô£] [9‚ô† 8‚ô• 6‚ô¶ 3‚ô•]
	//   Lo: None [] []
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô•]
	//   Hi: Pair, Nines, kickers Ace, King, Seven [9‚ô£ 9‚ô† A‚ô• K‚ô† 7‚ô£] [Q‚ô¶ 8‚ô£ 3‚ô£ 3‚ô•]
	//   Lo: None [] []
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô•]
	//   Hi: Pair, Nines, kickers King, Ten, Seven [9‚ô£ 9‚ô† K‚ô¶ T‚ô¶ 7‚ô£] [8‚ô¶ 4‚ô• 3‚ô£ 3‚ô•]
	//   Lo: None [] []
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô†]
	//   Hi: Pair, Nines, kickers Queen, Jack, Seven [9‚ô£ 9‚ô† Q‚ô• J‚ô¶ 7‚ô£] [6‚ô† 3‚ô£ 3‚ô• 2‚ô•]
	//   Lo: None [] []
	// Result (Hi): Player 1 scoops with Four of a Kind, Threes, kicker Nine
	// Result (Lo): no player made a lo
	// ------ OmahaHiLo 3 ------
	// Board: [J‚ô£ T‚ô• 4‚ô• K‚ô£ Q‚ô£]
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶]
	//   Hi: Two Pair, Kings over Queens, kicker Jack [K‚ô£ K‚ô† Q‚ô£ Q‚ô† J‚ô£] [J‚ô¶ T‚ô• 4‚ô£ 4‚ô•]
	//   Lo: None [] []
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô†]
	//   Hi: Pair, Jacks, kickers King, Queen, Eight [J‚ô£ J‚ô† K‚ô£ Q‚ô£ 8‚ô•] [T‚ô• 4‚ô• 3‚ô£ 2‚ô†]
	//   Lo: None [] []
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶]
	//   Hi: Two Pair, Queens over Tens, kicker King [Q‚ô£ Q‚ô¶ T‚ô• T‚ô† K‚ô£] [J‚ô£ 4‚ô• 3‚ô† 2‚ô£]
	//   Lo: None [] []
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶]
	//   Hi: Pair, Tens, kickers King, Queen, Five [T‚ô¶ T‚ô• K‚ô£ Q‚ô£ 5‚ô£] [J‚ô£ 5‚ô• 4‚ô• 2‚ô¶]
	//   Lo: None [] []
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£]
	//   Hi: Ace-high, kickers King, Queen, Jack, Seven [A‚ô£ K‚ô£ Q‚ô£ J‚ô£ 7‚ô†] [T‚ô• 6‚ô† 4‚ô• 3‚ô•]
	//   Lo: None [] []
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£]
	//   Hi: Two Pair, Kings over Tens, kicker Queen [K‚ô£ K‚ô¶ T‚ô£ T‚ô• Q‚ô£] [J‚ô£ 8‚ô¶ 4‚ô• 4‚ô†]
	//   Lo: None [] []
	// Result (Hi): Player 1 scoops with Two Pair, Kings over Queens, kicker Jack
	// Result (Lo): no player made a lo
	// ------ OmahaHiLo 4 ------
	// Board: [2‚ô¶ 6‚ô¶ 6‚ô£ Q‚ô£ 7‚ô£]
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£]
	//   Hi: Flush, Ace-high, kickers Queen, Eight, Seven, Six [A‚ô£ Q‚ô£ 8‚ô£ 7‚ô£ 6‚ô£] [K‚ô• 6‚ô¶ 6‚ô† 2‚ô¶]
	//   Lo: Eight, Seven, Six, Two, Ace-low [8‚ô£ 7‚ô£ 6‚ô¶ 2‚ô¶ A‚ô£] [K‚ô• Q‚ô£ 6‚ô£ 6‚ô†]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô•]
	//   Hi: Two Pair, Queens over Sixes, kicker Jack [Q‚ô£ Q‚ô• 6‚ô£ 6‚ô¶ J‚ô£] [7‚ô£ 5‚ô• 4‚ô• 2‚ô¶]
	//   Lo: Seven, Six, Five, Four, Two-low [7‚ô£ 6‚ô¶ 5‚ô• 4‚ô• 2‚ô¶] [Q‚ô£ Q‚ô• J‚ô£ 6‚ô£]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô†]
	//   Hi: Full House, Sixes full of Queens [6‚ô£ 6‚ô¶ 6‚ô• Q‚ô£ Q‚ô†] [7‚ô£ 5‚ô£ 2‚ô£ 2‚ô¶]
	//   Lo: None [] []
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô†]
	//   Hi: Two Pair, Jacks over Sixes, kicker Queen [J‚ô• J‚ô† 6‚ô£ 6‚ô¶ Q‚ô£] [K‚ô† 9‚ô† 7‚ô£ 2‚ô¶]
	//   Lo: None [] []
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶]
	//   Hi: Pair, Sixes, kickers King, Queen, Eight [6‚ô£ 6‚ô¶ K‚ô£ Q‚ô£ 8‚ô¶] [7‚ô£ 4‚ô¶ 3‚ô¶ 2‚ô¶]
	//   Lo: Seven, Six, Four, Three, Two-low [7‚ô£ 6‚ô¶ 4‚ô¶ 3‚ô¶ 2‚ô¶] [K‚ô£ Q‚ô£ 8‚ô¶ 6‚ô£]
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô•]
	//   Hi: Two Pair, Queens over Sevens, kicker Six [Q‚ô£ Q‚ô¶ 7‚ô£ 7‚ô• 6‚ô¶] [A‚ô† T‚ô£ 6‚ô£ 2‚ô¶]
	//   Lo: None [] []
	// Result (Hi): Player 3 wins with Full House, Sixes full of Queens
	// Result (Lo): Player 5 wins with Seven, Six, Four, Three, Two-low
	// ------ OmahaHiLo 5 ------
	// Board: [4‚ô£ K‚ô£ 6‚ô¶ 9‚ô¶ 5‚ô†]
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£]
	//   Hi: Two Pair, Fives over Fours, kicker King [5‚ô¶ 5‚ô† 4‚ô£ 4‚ô¶ K‚ô£] [J‚ô£ 9‚ô¶ 6‚ô¶ 3‚ô¶]
	//   Lo: None [] []
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£]
	//   Hi: Pair, Kings, kickers Jack, Nine, Six [K‚ô£ K‚ô† J‚ô† 9‚ô¶ 6‚ô¶] [T‚ô• 5‚ô† 4‚ô£ 2‚ô£]
	//   Lo: None [] []
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô†]
	//   Hi: Pair, Nines, kickers Ace, King, Six [9‚ô¶ 9‚ô† A‚ô£ K‚ô£ 6‚ô¶] [T‚ô† 5‚ô† 4‚ô£ 3‚ô†]
	//   Lo: Six, Five, Four, Three, Ace-low [6‚ô¶ 5‚ô† 4‚ô£ 3‚ô† A‚ô£] [K‚ô£ T‚ô† 9‚ô¶ 9‚ô†]
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£]
	//   Hi: Straight, Nine-high [9‚ô¶ 8‚ô† 7‚ô¶ 6‚ô¶ 5‚ô†] [K‚ô£ 7‚ô£ 4‚ô£ 3‚ô£]
	//   Lo: Seven, Six, Five, Four, Three-low [7‚ô¶ 6‚ô¶ 5‚ô† 4‚ô£ 3‚ô£] [K‚ô£ 9‚ô¶ 8‚ô† 7‚ô£]
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô†]
	//   Hi: Pair, Fives, kickers King, Queen, Nine [5‚ô£ 5‚ô† K‚ô£ Q‚ô† 9‚ô¶] [J‚ô• 6‚ô¶ 4‚ô£ 2‚ô†]
	//   Lo: None [] []
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô•]
	//   Hi: Pair, Sevens, kickers King, Nine, Six [7‚ô• 7‚ô† K‚ô£ 9‚ô¶ 6‚ô¶] [6‚ô† 5‚ô† 4‚ô£ 2‚ô•]
	//   Lo: Seven, Six, Five, Four, Two-low [7‚ô† 6‚ô¶ 5‚ô† 4‚ô£ 2‚ô•] [K‚ô£ 9‚ô¶ 7‚ô• 6‚ô†]
	// Result (Hi): Player 4 wins with Straight, Nine-high
	// Result (Lo): Player 3 wins with Six, Five, Four, Three, Ace-low
}

func ExampleType_stud() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, _ := cardrank.Stud.Deal(r, 1, game.players)
		evs := cardrank.Stud.EvalPockets(pockets, nil)
		fmt.Printf("------ Stud %d ------\n", i+1)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Stud 1 ------
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô† 6‚ô£ 5‚ô• Q‚ô¶] Pair, Queens, kickers Ace, King, Jack [Q‚ô¶ Q‚ô† A‚ô• K‚ô• J‚ô£] [6‚ô£ 5‚ô•]
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô† 3‚ô• 4‚ô• 7‚ô•] Two Pair, Sevens over Fours, kicker Five [7‚ô£ 7‚ô• 4‚ô£ 4‚ô• 5‚ô†] [3‚ô• 2‚ô†]
	// Result:   Player 2 wins with Two Pair, Sevens over Fours, kicker Five
	// ------ Stud 2 ------
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô† T‚ô• 9‚ô† K‚ô•] Two Pair, Tens over Threes, kicker King [T‚ô• T‚ô† 3‚ô¶ 3‚ô† K‚ô•] [Q‚ô† 9‚ô†]
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£ 3‚ô• T‚ô£ 7‚ô•] Pair, Sixes, kickers Queen, Ten, Eight [6‚ô£ 6‚ô¶ Q‚ô£ T‚ô£ 8‚ô•] [7‚ô• 3‚ô•]
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô• 7‚ô£ 9‚ô£ 2‚ô£] Ace-high, kickers King, Queen, Nine, Eight [A‚ô• K‚ô† Q‚ô¶ 9‚ô£ 8‚ô£] [7‚ô£ 2‚ô£]
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô• 3‚ô£ J‚ô† 2‚ô¶] King-high, kickers Jack, Ten, Eight, Four [K‚ô¶ J‚ô† T‚ô¶ 8‚ô¶ 4‚ô•] [3‚ô£ 2‚ô¶]
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô† 5‚ô¶ 7‚ô† A‚ô¶] Ace-high, kickers Queen, Jack, Seven, Six [A‚ô¶ Q‚ô• J‚ô¶ 7‚ô† 6‚ô†] [5‚ô¶ 2‚ô•]
	// Result:   Player 1 wins with Two Pair, Tens over Threes, kicker King
	// ------ Stud 3 ------
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶ 7‚ô• 7‚ô£ J‚ô•] Two Pair, Jacks over Sevens, kicker King [J‚ô¶ J‚ô• 7‚ô£ 7‚ô• K‚ô†] [Q‚ô† 4‚ô£]
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô† J‚ô£ Q‚ô£ 7‚ô¶] Pair, Jacks, kickers Queen, Eight, Seven [J‚ô£ J‚ô† Q‚ô£ 8‚ô• 7‚ô¶] [3‚ô£ 2‚ô†]
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶ T‚ô• K‚ô• 3‚ô¶] Two Pair, Tens over Threes, kicker King [T‚ô• T‚ô† 3‚ô¶ 3‚ô† K‚ô•] [Q‚ô¶ 2‚ô£]
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶ 4‚ô• 9‚ô¶ 2‚ô•] Two Pair, Fives over Twos, kicker Ten [5‚ô£ 5‚ô• 2‚ô¶ 2‚ô• T‚ô¶] [9‚ô¶ 4‚ô•]
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£ 8‚ô† 6‚ô¶ A‚ô¶] Two Pair, Aces over Sixes, kicker Eight [A‚ô£ A‚ô¶ 6‚ô¶ 6‚ô† 8‚ô†] [7‚ô† 3‚ô•]
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£ K‚ô£ 5‚ô† 9‚ô£] Pair, Kings, kickers Ten, Nine, Eight [K‚ô£ K‚ô¶ T‚ô£ 9‚ô£ 8‚ô¶] [5‚ô† 4‚ô†]
	// Result:   Player 5 wins with Two Pair, Aces over Sixes, kicker Eight
	// ------ Stud 4 ------
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£ 2‚ô† 5‚ô¶ A‚ô•] Pair, Aces, kickers King, Eight, Six [A‚ô£ A‚ô• K‚ô• 8‚ô£ 6‚ô†] [5‚ô¶ 2‚ô†]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô• 2‚ô¶ 7‚ô£ 3‚ô†] Queen-high, kickers Jack, Seven, Five, Four [Q‚ô• J‚ô£ 7‚ô£ 5‚ô• 4‚ô•] [3‚ô† 2‚ô¶]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô† 6‚ô¶ 9‚ô• 3‚ô£] Pair, Sixes, kickers Queen, Nine, Five [6‚ô¶ 6‚ô• Q‚ô† 9‚ô• 5‚ô£] [3‚ô£ 2‚ô£]
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô† 6‚ô£ K‚ô¶ T‚ô†] Two Pair, Kings over Jacks, kicker Ten [K‚ô¶ K‚ô† J‚ô• J‚ô† T‚ô†] [9‚ô† 6‚ô£]
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶ 8‚ô• 9‚ô£ T‚ô•] Pair, Eights, kickers King, Ten, Nine [8‚ô¶ 8‚ô• K‚ô£ T‚ô• 9‚ô£] [4‚ô¶ 3‚ô¶]
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô• Q‚ô£ 7‚ô¶ 2‚ô•] Two Pair, Queens over Sevens, kicker Ace [Q‚ô£ Q‚ô¶ 7‚ô¶ 7‚ô• A‚ô†] [T‚ô£ 2‚ô•]
	// Result:   Player 4 wins with Two Pair, Kings over Jacks, kicker Ten
	// ------ Stud 5 ------
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£ 4‚ô• K‚ô• 8‚ô£] Pair, Fours, kickers King, Jack, Eight [4‚ô¶ 4‚ô• K‚ô• J‚ô£ 8‚ô£] [5‚ô¶ 3‚ô¶]
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£ 4‚ô£ 5‚ô† 2‚ô¶] Pair, Twos, kickers King, Jack, Ten [2‚ô£ 2‚ô¶ K‚ô† J‚ô† T‚ô•] [5‚ô† 4‚ô£]
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô† K‚ô£ 8‚ô¶ A‚ô•] Pair, Aces, kickers King, Ten, Nine [A‚ô£ A‚ô• K‚ô£ T‚ô† 9‚ô†] [8‚ô¶ 3‚ô†]
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£ 6‚ô¶ 6‚ô• 6‚ô£] Full House, Sixes full of Sevens [6‚ô£ 6‚ô¶ 6‚ô• 7‚ô£ 7‚ô¶] [8‚ô† 3‚ô£]
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô† A‚ô† 8‚ô• 4‚ô†] Ace-high, kickers Queen, Jack, Eight, Five [A‚ô† Q‚ô† J‚ô• 8‚ô• 5‚ô£] [4‚ô† 2‚ô†]
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô• 9‚ô¶ K‚ô¶ T‚ô¶] Pair, Sevens, kickers King, Ten, Nine [7‚ô• 7‚ô† K‚ô¶ T‚ô¶ 9‚ô¶] [6‚ô† 2‚ô•]
	// Result:   Player 4 wins with Full House, Sixes full of Sevens
}

func ExampleType_studHiLo() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, _ := cardrank.StudHiLo.Deal(r, 1, game.players)
		evs := cardrank.StudHiLo.EvalPockets(pockets, nil)
		fmt.Printf("------ StudHiLo %d ------\n", i+1)
		for j := 0; j < game.players; j++ {
			hi, lo := evs[j].Desc(false), evs[j].Desc(true)
			fmt.Printf("Player %d: %b\n", j+1, pockets[j])
			fmt.Printf("  Hi: %s %b %b\n", hi, hi.Best, hi.Unused)
			fmt.Printf("  Lo: %s %b %b\n", lo, lo.Best, lo.Unused)
		}
		hiOrder, hiPivot := cardrank.Order(evs, false)
		loOrder, loPivot := cardrank.Order(evs, true)
		typ := "wins"
		if loPivot == 0 {
			typ = "scoops"
		}
		desc := evs[hiOrder[0]].Desc(false)
		if hiPivot == 1 {
			fmt.Printf("Result (Hi): Player %d %s with %s\n", hiOrder[0]+1, typ, desc)
		} else {
			var s []string
			for j := 0; j < hiPivot; j++ {
				s = append(s, strconv.Itoa(hiOrder[j]+1))
			}
			fmt.Printf("Result (Hi): Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
		if loPivot == 1 {
			desc := evs[loOrder[0]].Desc(true)
			fmt.Printf("Result (Lo): Player %d wins with %s\n", loOrder[0]+1, desc)
		} else if loPivot > 1 {
			var s []string
			for j := 0; j < loPivot; j++ {
				s = append(s, strconv.Itoa(loOrder[j]+1))
			}
			desc := evs[loOrder[0]].Desc(true)
			fmt.Printf("Result (Lo): Players %s push with %s\n", strings.Join(s, ", "), desc)
		} else {
			fmt.Printf("Result (Lo): no player made a lo\n")
		}
	}
	// Output:
	// ------ StudHiLo 1 ------
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô† 6‚ô£ 5‚ô• Q‚ô¶]
	//   Hi: Pair, Queens, kickers Ace, King, Jack [Q‚ô¶ Q‚ô† A‚ô• K‚ô• J‚ô£] [6‚ô£ 5‚ô•]
	//   Lo: None [] []
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô† 3‚ô• 4‚ô• 7‚ô•]
	//   Hi: Two Pair, Sevens over Fours, kicker Five [7‚ô£ 7‚ô• 4‚ô£ 4‚ô• 5‚ô†] [3‚ô• 2‚ô†]
	//   Lo: Seven, Five, Four, Three, Two-low [7‚ô£ 5‚ô† 4‚ô£ 3‚ô• 2‚ô†] [7‚ô• 4‚ô•]
	// Result (Hi): Player 2 wins with Two Pair, Sevens over Fours, kicker Five
	// Result (Lo): Player 2 wins with Seven, Five, Four, Three, Two-low
	// ------ StudHiLo 2 ------
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô† T‚ô• 9‚ô† K‚ô•]
	//   Hi: Two Pair, Tens over Threes, kicker King [T‚ô• T‚ô† 3‚ô¶ 3‚ô† K‚ô•] [Q‚ô† 9‚ô†]
	//   Lo: None [] []
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£ 3‚ô• T‚ô£ 7‚ô•]
	//   Hi: Pair, Sixes, kickers Queen, Ten, Eight [6‚ô£ 6‚ô¶ Q‚ô£ T‚ô£ 8‚ô•] [7‚ô• 3‚ô•]
	//   Lo: None [] []
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô• 7‚ô£ 9‚ô£ 2‚ô£]
	//   Hi: Ace-high, kickers King, Queen, Nine, Eight [A‚ô• K‚ô† Q‚ô¶ 9‚ô£ 8‚ô£] [7‚ô£ 2‚ô£]
	//   Lo: None [] []
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô• 3‚ô£ J‚ô† 2‚ô¶]
	//   Hi: King-high, kickers Jack, Ten, Eight, Four [K‚ô¶ J‚ô† T‚ô¶ 8‚ô¶ 4‚ô•] [3‚ô£ 2‚ô¶]
	//   Lo: None [] []
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô† 5‚ô¶ 7‚ô† A‚ô¶]
	//   Hi: Ace-high, kickers Queen, Jack, Seven, Six [A‚ô¶ Q‚ô• J‚ô¶ 7‚ô† 6‚ô†] [5‚ô¶ 2‚ô•]
	//   Lo: Seven, Six, Five, Two, Ace-low [7‚ô† 6‚ô† 5‚ô¶ 2‚ô• A‚ô¶] [Q‚ô• J‚ô¶]
	// Result (Hi): Player 1 wins with Two Pair, Tens over Threes, kicker King
	// Result (Lo): Player 5 wins with Seven, Six, Five, Two, Ace-low
	// ------ StudHiLo 3 ------
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶ 7‚ô• 7‚ô£ J‚ô•]
	//   Hi: Two Pair, Jacks over Sevens, kicker King [J‚ô¶ J‚ô• 7‚ô£ 7‚ô• K‚ô†] [Q‚ô† 4‚ô£]
	//   Lo: None [] []
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô† J‚ô£ Q‚ô£ 7‚ô¶]
	//   Hi: Pair, Jacks, kickers Queen, Eight, Seven [J‚ô£ J‚ô† Q‚ô£ 8‚ô• 7‚ô¶] [3‚ô£ 2‚ô†]
	//   Lo: None [] []
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶ T‚ô• K‚ô• 3‚ô¶]
	//   Hi: Two Pair, Tens over Threes, kicker King [T‚ô• T‚ô† 3‚ô¶ 3‚ô† K‚ô•] [Q‚ô¶ 2‚ô£]
	//   Lo: None [] []
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶ 4‚ô• 9‚ô¶ 2‚ô•]
	//   Hi: Two Pair, Fives over Twos, kicker Ten [5‚ô£ 5‚ô• 2‚ô¶ 2‚ô• T‚ô¶] [9‚ô¶ 4‚ô•]
	//   Lo: None [] []
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£ 8‚ô† 6‚ô¶ A‚ô¶]
	//   Hi: Two Pair, Aces over Sixes, kicker Eight [A‚ô£ A‚ô¶ 6‚ô¶ 6‚ô† 8‚ô†] [7‚ô† 3‚ô•]
	//   Lo: Eight, Seven, Six, Three, Ace-low [8‚ô† 7‚ô† 6‚ô† 3‚ô• A‚ô£] [A‚ô¶ 6‚ô¶]
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£ K‚ô£ 5‚ô† 9‚ô£]
	//   Hi: Pair, Kings, kickers Ten, Nine, Eight [K‚ô£ K‚ô¶ T‚ô£ 9‚ô£ 8‚ô¶] [5‚ô† 4‚ô†]
	//   Lo: None [] []
	// Result (Hi): Player 5 wins with Two Pair, Aces over Sixes, kicker Eight
	// Result (Lo): Player 5 wins with Eight, Seven, Six, Three, Ace-low
	// ------ StudHiLo 4 ------
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£ 2‚ô† 5‚ô¶ A‚ô•]
	//   Hi: Pair, Aces, kickers King, Eight, Six [A‚ô£ A‚ô• K‚ô• 8‚ô£ 6‚ô†] [5‚ô¶ 2‚ô†]
	//   Lo: Eight, Six, Five, Two, Ace-low [8‚ô£ 6‚ô† 5‚ô¶ 2‚ô† A‚ô£] [A‚ô• K‚ô•]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô• 2‚ô¶ 7‚ô£ 3‚ô†]
	//   Hi: Queen-high, kickers Jack, Seven, Five, Four [Q‚ô• J‚ô£ 7‚ô£ 5‚ô• 4‚ô•] [3‚ô† 2‚ô¶]
	//   Lo: Seven, Five, Four, Three, Two-low [7‚ô£ 5‚ô• 4‚ô• 3‚ô† 2‚ô¶] [Q‚ô• J‚ô£]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô† 6‚ô¶ 9‚ô• 3‚ô£]
	//   Hi: Pair, Sixes, kickers Queen, Nine, Five [6‚ô¶ 6‚ô• Q‚ô† 9‚ô• 5‚ô£] [3‚ô£ 2‚ô£]
	//   Lo: None [] []
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô† 6‚ô£ K‚ô¶ T‚ô†]
	//   Hi: Two Pair, Kings over Jacks, kicker Ten [K‚ô¶ K‚ô† J‚ô• J‚ô† T‚ô†] [9‚ô† 6‚ô£]
	//   Lo: None [] []
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶ 8‚ô• 9‚ô£ T‚ô•]
	//   Hi: Pair, Eights, kickers King, Ten, Nine [8‚ô¶ 8‚ô• K‚ô£ T‚ô• 9‚ô£] [4‚ô¶ 3‚ô¶]
	//   Lo: None [] []
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô• Q‚ô£ 7‚ô¶ 2‚ô•]
	//   Hi: Two Pair, Queens over Sevens, kicker Ace [Q‚ô£ Q‚ô¶ 7‚ô¶ 7‚ô• A‚ô†] [T‚ô£ 2‚ô•]
	//   Lo: None [] []
	// Result (Hi): Player 4 wins with Two Pair, Kings over Jacks, kicker Ten
	// Result (Lo): Player 2 wins with Seven, Five, Four, Three, Two-low
	// ------ StudHiLo 5 ------
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£ 4‚ô• K‚ô• 8‚ô£]
	//   Hi: Pair, Fours, kickers King, Jack, Eight [4‚ô¶ 4‚ô• K‚ô• J‚ô£ 8‚ô£] [5‚ô¶ 3‚ô¶]
	//   Lo: None [] []
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£ 4‚ô£ 5‚ô† 2‚ô¶]
	//   Hi: Pair, Twos, kickers King, Jack, Ten [2‚ô£ 2‚ô¶ K‚ô† J‚ô† T‚ô•] [5‚ô† 4‚ô£]
	//   Lo: None [] []
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô† K‚ô£ 8‚ô¶ A‚ô•]
	//   Hi: Pair, Aces, kickers King, Ten, Nine [A‚ô£ A‚ô• K‚ô£ T‚ô† 9‚ô†] [8‚ô¶ 3‚ô†]
	//   Lo: None [] []
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£ 6‚ô¶ 6‚ô• 6‚ô£]
	//   Hi: Full House, Sixes full of Sevens [6‚ô£ 6‚ô¶ 6‚ô• 7‚ô£ 7‚ô¶] [8‚ô† 3‚ô£]
	//   Lo: None [] []
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô† A‚ô† 8‚ô• 4‚ô†]
	//   Hi: Ace-high, kickers Queen, Jack, Eight, Five [A‚ô† Q‚ô† J‚ô• 8‚ô• 5‚ô£] [4‚ô† 2‚ô†]
	//   Lo: Eight, Five, Four, Two, Ace-low [8‚ô• 5‚ô£ 4‚ô† 2‚ô† A‚ô†] [Q‚ô† J‚ô•]
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô• 9‚ô¶ K‚ô¶ T‚ô¶]
	//   Hi: Pair, Sevens, kickers King, Ten, Nine [7‚ô• 7‚ô† K‚ô¶ T‚ô¶ 9‚ô¶] [6‚ô† 2‚ô•]
	//   Lo: None [] []
	// Result (Hi): Player 4 wins with Full House, Sixes full of Sevens
	// Result (Lo): Player 5 wins with Eight, Five, Four, Two, Ace-low
}

func ExampleType_razz() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, _ := cardrank.Razz.Deal(r, 1, game.players)
		evs := cardrank.Razz.EvalPockets(pockets, nil)
		fmt.Printf("------ Razz %d ------\n", i+1)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Razz 1 ------
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô† 6‚ô£ 5‚ô• Q‚ô¶] Queen, Jack, Six, Five, Ace-low [Q‚ô† J‚ô£ 6‚ô£ 5‚ô• A‚ô•] [K‚ô• Q‚ô¶]
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô† 3‚ô• 4‚ô• 7‚ô•] Seven, Five, Four, Three, Two-low [7‚ô£ 5‚ô† 4‚ô£ 3‚ô• 2‚ô†] [7‚ô• 4‚ô•]
	// Result:   Player 2 wins with Seven, Five, Four, Three, Two-low
	// ------ Razz 2 ------
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô† T‚ô• 9‚ô† K‚ô•] King, Queen, Ten, Nine, Three-low [K‚ô• Q‚ô† T‚ô† 9‚ô† 3‚ô†] [T‚ô• 3‚ô¶]
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£ 3‚ô• T‚ô£ 7‚ô•] Ten, Eight, Seven, Six, Three-low [T‚ô£ 8‚ô• 7‚ô• 6‚ô¶ 3‚ô•] [Q‚ô£ 6‚ô£]
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô• 7‚ô£ 9‚ô£ 2‚ô£] Nine, Eight, Seven, Two, Ace-low [9‚ô£ 8‚ô£ 7‚ô£ 2‚ô£ A‚ô•] [K‚ô† Q‚ô¶]
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô• 3‚ô£ J‚ô† 2‚ô¶] Ten, Eight, Four, Three, Two-low [T‚ô¶ 8‚ô¶ 4‚ô• 3‚ô£ 2‚ô¶] [K‚ô¶ J‚ô†]
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô† 5‚ô¶ 7‚ô† A‚ô¶] Seven, Six, Five, Two, Ace-low [7‚ô† 6‚ô† 5‚ô¶ 2‚ô• A‚ô¶] [Q‚ô• J‚ô¶]
	// Result:   Player 5 wins with Seven, Six, Five, Two, Ace-low
	// ------ Razz 3 ------
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶ 7‚ô• 7‚ô£ J‚ô•] King, Queen, Jack, Seven, Four-low [K‚ô† Q‚ô† J‚ô¶ 7‚ô• 4‚ô£] [J‚ô• 7‚ô£]
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô† J‚ô£ Q‚ô£ 7‚ô¶] Jack, Eight, Seven, Three, Two-low [J‚ô† 8‚ô• 7‚ô¶ 3‚ô£ 2‚ô†] [Q‚ô£ J‚ô£]
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶ T‚ô• K‚ô• 3‚ô¶] King, Queen, Ten, Three, Two-low [K‚ô• Q‚ô¶ T‚ô† 3‚ô† 2‚ô£] [T‚ô• 3‚ô¶]
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶ 4‚ô• 9‚ô¶ 2‚ô•] Ten, Nine, Five, Four, Two-low [T‚ô¶ 9‚ô¶ 5‚ô£ 4‚ô• 2‚ô¶] [5‚ô• 2‚ô•]
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£ 8‚ô† 6‚ô¶ A‚ô¶] Eight, Seven, Six, Three, Ace-low [8‚ô† 7‚ô† 6‚ô† 3‚ô• A‚ô£] [A‚ô¶ 6‚ô¶]
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£ K‚ô£ 5‚ô† 9‚ô£] Ten, Nine, Eight, Five, Four-low [T‚ô£ 9‚ô£ 8‚ô¶ 5‚ô† 4‚ô†] [K‚ô£ K‚ô¶]
	// Result:   Player 5 wins with Eight, Seven, Six, Three, Ace-low
	// ------ Razz 4 ------
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£ 2‚ô† 5‚ô¶ A‚ô•] Eight, Six, Five, Two, Ace-low [8‚ô£ 6‚ô† 5‚ô¶ 2‚ô† A‚ô£] [A‚ô• K‚ô•]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô• 2‚ô¶ 7‚ô£ 3‚ô†] Seven, Five, Four, Three, Two-low [7‚ô£ 5‚ô• 4‚ô• 3‚ô† 2‚ô¶] [Q‚ô• J‚ô£]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô† 6‚ô¶ 9‚ô• 3‚ô£] Nine, Six, Five, Three, Two-low [9‚ô• 6‚ô• 5‚ô£ 3‚ô£ 2‚ô£] [Q‚ô† 6‚ô¶]
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô† 6‚ô£ K‚ô¶ T‚ô†] King, Jack, Ten, Nine, Six-low [K‚ô† J‚ô• T‚ô† 9‚ô† 6‚ô£] [K‚ô¶ J‚ô†]
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶ 8‚ô• 9‚ô£ T‚ô•] Ten, Nine, Eight, Four, Three-low [T‚ô• 9‚ô£ 8‚ô¶ 4‚ô¶ 3‚ô¶] [K‚ô£ 8‚ô•]
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô• Q‚ô£ 7‚ô¶ 2‚ô•] Queen, Ten, Seven, Two, Ace-low [Q‚ô¶ T‚ô£ 7‚ô• 2‚ô• A‚ô†] [Q‚ô£ 7‚ô¶]
	// Result:   Player 2 wins with Seven, Five, Four, Three, Two-low
	// ------ Razz 5 ------
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£ 4‚ô• K‚ô• 8‚ô£] Jack, Eight, Five, Four, Three-low [J‚ô£ 8‚ô£ 5‚ô¶ 4‚ô¶ 3‚ô¶] [K‚ô• 4‚ô•]
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£ 4‚ô£ 5‚ô† 2‚ô¶] Jack, Ten, Five, Four, Two-low [J‚ô† T‚ô• 5‚ô† 4‚ô£ 2‚ô£] [K‚ô† 2‚ô¶]
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô† K‚ô£ 8‚ô¶ A‚ô•] Ten, Nine, Eight, Three, Ace-low [T‚ô† 9‚ô† 8‚ô¶ 3‚ô† A‚ô£] [A‚ô• K‚ô£]
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£ 6‚ô¶ 6‚ô• 6‚ô£] Pair, Sixes, kickers Eight, Seven, Three [6‚ô¶ 6‚ô• 8‚ô† 7‚ô¶ 3‚ô£] [7‚ô£ 6‚ô£]
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô† A‚ô† 8‚ô• 4‚ô†] Eight, Five, Four, Two, Ace-low [8‚ô• 5‚ô£ 4‚ô† 2‚ô† A‚ô†] [Q‚ô† J‚ô•]
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô• 9‚ô¶ K‚ô¶ T‚ô¶] Ten, Nine, Seven, Six, Two-low [T‚ô¶ 9‚ô¶ 7‚ô† 6‚ô† 2‚ô•] [K‚ô¶ 7‚ô•]
	// Result:   Player 5 wins with Eight, Five, Four, Two, Ace-low
}

func ExampleType_badugi() {
	for i, game := range []struct {
		seed    int64
		players int
	}{
		{119, 2},
		{321, 5},
		{408, 6},
		{455, 6},
		{1113, 6},
	} {
		// note: use a real random source
		r := rand.New(rand.NewSource(game.seed))
		pockets, _ := cardrank.Badugi.Deal(r, 1, game.players)
		evs := cardrank.Badugi.EvalPockets(pockets, nil)
		fmt.Printf("------ Badugi %d ------\n", i+1)
		for j := 0; j < game.players; j++ {
			desc := evs[j].Desc(false)
			fmt.Printf("Player %d: %b %s %b %b\n", j+1, pockets[j], desc, desc.Best, desc.Unused)
		}
		order, pivot := cardrank.Order(evs, false)
		desc := evs[order[0]].Desc(false)
		if pivot == 1 {
			fmt.Printf("Result:   Player %d wins with %s\n", order[0]+1, desc)
		} else {
			var s []string
			for j := 0; j < pivot; j++ {
				s = append(s, strconv.Itoa(order[j]+1))
			}
			fmt.Printf("Result:   Players %s push with %s\n", strings.Join(s, ", "), desc)
		}
	}
	// Output:
	// ------ Badugi 1 ------
	// Player 1: [K‚ô• J‚ô£ A‚ô• Q‚ô†] Queen, Jack, Ace-low [Q‚ô† J‚ô£ A‚ô•] [K‚ô•]
	// Player 2: [7‚ô£ 4‚ô£ 5‚ô† 2‚ô†] Four, Two-low [4‚ô£ 2‚ô†] [7‚ô£ 5‚ô†]
	// Result:   Player 1 wins with Queen, Jack, Ace-low
	// ------ Badugi 2 ------
	// Player 1: [3‚ô† 3‚ô¶ T‚ô† Q‚ô†] Ten, Three-low [T‚ô† 3‚ô¶] [Q‚ô† 3‚ô†]
	// Player 2: [6‚ô¶ Q‚ô£ 8‚ô• 6‚ô£] Queen, Eight, Six-low [Q‚ô£ 8‚ô• 6‚ô¶] [6‚ô£]
	// Player 3: [Q‚ô¶ K‚ô† 8‚ô£ A‚ô•] King, Queen, Eight, Ace-low [K‚ô† Q‚ô¶ 8‚ô£ A‚ô•] []
	// Player 4: [K‚ô¶ T‚ô¶ 8‚ô¶ 4‚ô•] Eight, Four-low [8‚ô¶ 4‚ô•] [K‚ô¶ T‚ô¶]
	// Player 5: [J‚ô¶ 2‚ô• Q‚ô• 6‚ô†] Jack, Six, Two-low [J‚ô¶ 6‚ô† 2‚ô•] [Q‚ô•]
	// Result:   Player 3 wins with King, Queen, Eight, Ace-low
	// ------ Badugi 3 ------
	// Player 1: [K‚ô† Q‚ô† 4‚ô£ J‚ô¶] Queen, Jack, Four-low [Q‚ô† J‚ô¶ 4‚ô£] [K‚ô†]
	// Player 2: [J‚ô† 3‚ô£ 8‚ô• 2‚ô†] Eight, Three, Two-low [8‚ô• 3‚ô£ 2‚ô†] [J‚ô†]
	// Player 3: [3‚ô† T‚ô† 2‚ô£ Q‚ô¶] Queen, Three, Two-low [Q‚ô¶ 3‚ô† 2‚ô£] [T‚ô†]
	// Player 4: [5‚ô£ 5‚ô• T‚ô¶ 2‚ô¶] Five, Two-low [5‚ô• 2‚ô¶] [T‚ô¶ 5‚ô£]
	// Player 5: [7‚ô† 3‚ô• 6‚ô† A‚ô£] Six, Three, Ace-low [6‚ô† 3‚ô• A‚ô£] [7‚ô†]
	// Player 6: [4‚ô† 8‚ô¶ K‚ô¶ T‚ô£] Ten, Eight, Four-low [T‚ô£ 8‚ô¶ 4‚ô†] [K‚ô¶]
	// Result:   Player 5 wins with Six, Three, Ace-low
	// ------ Badugi 4 ------
	// Player 1: [6‚ô† K‚ô• A‚ô£ 8‚ô£] King, Six, Ace-low [K‚ô• 6‚ô† A‚ô£] [8‚ô£]
	// Player 2: [Q‚ô• 4‚ô• J‚ô£ 5‚ô•] Jack, Four-low [J‚ô£ 4‚ô•] [Q‚ô• 5‚ô•]
	// Player 3: [2‚ô£ 6‚ô• 5‚ô£ Q‚ô†] Queen, Six, Two-low [Q‚ô† 6‚ô• 2‚ô£] [5‚ô£]
	// Player 4: [9‚ô† J‚ô• K‚ô† J‚ô†] Jack, Nine-low [J‚ô• 9‚ô†] [K‚ô† J‚ô†]
	// Player 5: [3‚ô¶ 4‚ô¶ K‚ô£ 8‚ô¶] King, Three-low [K‚ô£ 3‚ô¶] [8‚ô¶ 4‚ô¶]
	// Player 6: [T‚ô£ Q‚ô¶ A‚ô† 7‚ô•] Queen, Ten, Seven, Ace-low [Q‚ô¶ T‚ô£ 7‚ô• A‚ô†] []
	// Result:   Player 6 wins with Queen, Ten, Seven, Ace-low
	// ------ Badugi 5 ------
	// Player 1: [3‚ô¶ 4‚ô¶ 5‚ô¶ J‚ô£] Jack, Three-low [J‚ô£ 3‚ô¶] [5‚ô¶ 4‚ô¶]
	// Player 2: [T‚ô• J‚ô† K‚ô† 2‚ô£] Jack, Ten, Two-low [J‚ô† T‚ô• 2‚ô£] [K‚ô†]
	// Player 3: [A‚ô£ 9‚ô† T‚ô† 3‚ô†] Three, Ace-low [3‚ô† A‚ô£] [T‚ô† 9‚ô†]
	// Player 4: [7‚ô¶ 3‚ô£ 8‚ô† 7‚ô£] Eight, Seven, Three-low [8‚ô† 7‚ô¶ 3‚ô£] [7‚ô£]
	// Player 5: [5‚ô£ Q‚ô† J‚ô• 2‚ô†] Jack, Five, Two-low [J‚ô• 5‚ô£ 2‚ô†] [Q‚ô†]
	// Player 6: [6‚ô† 7‚ô† 7‚ô• 2‚ô•] Six, Two-low [6‚ô† 2‚ô•] [7‚ô• 7‚ô†]
	// Result:   Player 4 wins with Eight, Seven, Three-low
}

func ExampleOddsCalc() {
	pockets := [][]cardrank.Card{
		cardrank.Must("Ah As Jc Qs"),
		cardrank.Must("3h 2h Ks Tc"),
	}
	board := cardrank.Must("6h 6s Jh")
	odds, _, ok := cardrank.Omaha.Odds(context.Background(), pockets, board)
	if !ok {
		panic("unable to calculate odds")
	}
	for i := range pockets {
		fmt.Printf("%d: %*v\n", i, i, odds)
	}
	// Output:
	// 0: 66.1% (542/820)
	// 1: 33.9% (278/820)
}

func ExampleExpValueCalc() {
	pocket, board := cardrank.Must("Kh 3h"), cardrank.Must("Ah 8h 3c")
	expv, ok := cardrank.Holdem.ExpValue(context.Background(), pocket, cardrank.WithBoard(board))
	if !ok {
		panic("unable to calculate expected value")
	}
	fmt.Println("expected value:", expv)
	// Output:
	// expected value: 75.6% (802371,13659/1070190)
}

func Example_computerHand() {
	pocket := cardrank.Must("Qh 7s")
	expv, ok := cardrank.Holdem.ExpValue(context.Background(), pocket)
	if !ok {
		panic("unable to calculate expected value")
	}
	fmt.Println("expected value:", expv)
	// Output:
	// expected value: 51.8% (1046780178,78084287/2097572400)
}

func Example_holdemPreflop() {
	pocket := cardrank.Must("2h 2d")
	ev := cardrank.EvalOf(cardrank.Holdem)
	ev.Eval(pocket, nil)
	fmt.Println("rank:", ev.HiRank)
	// Output:
	// rank: Pair
}

func Example_omahaPreflop() {
	pocket := cardrank.Must("Ah 7h Ad Jh")
	ev := cardrank.EvalOf(cardrank.Omaha)
	ev.Eval(pocket, nil)
	fmt.Println("rank:", ev.HiRank)
	// Output:
	// rank: Pair
}

/*
func ExampleType_calc() {
	board := cardrank.Must("Ah Ks 3c Qh")
	pockets := [][]cardrank.Card{
		cardrank.Must("Ac As"),
		cardrank.Must("Kd Kc"),
		cardrank.Must("3h Kh"),
	}
	odds, _, ok := cardrank.Holdem.CalcPockets(context.Background(), pockets, board)
	if !ok {
		panic("unable to finish calculating odds")
	}
	for i := 0; i < len(pockets); i++ {
		fmt.Printf("%d: %*s - %*b\n", i, i, odds, i, odds)
	}
	// Output:
	// 0: 78.6% (33/42) - [Q‚ô† J‚ô† T‚ô† 9‚ô† 8‚ô† 7‚ô† 6‚ô† 5‚ô† 4‚ô† 3‚ô† 2‚ô† A‚ô¶ Q‚ô¶ J‚ô¶ T‚ô¶ 9‚ô¶ 8‚ô¶ 7‚ô¶ 6‚ô¶ 5‚ô¶ 4‚ô¶ 3‚ô¶ 2‚ô¶ Q‚ô£ J‚ô£ T‚ô£ 9‚ô£ 8‚ô£ 7‚ô£ 6‚ô£ 5‚ô£ 4‚ô£ 2‚ô£]
	// 1: 0.0% (0/42) - none
	// 2: 21.4% (9/42) - any ‚ô•
}
*/
